/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/mix/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get AI-powered mixing suggestions for a track */
        post: operations["getMixSuggestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mix/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply suggested mix settings to track */
        post: operations["applyMixSuggestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mix/compare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Compare multiple mix variations */
        post: operations["compareMixes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mix/presets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available mix presets by genre */
        get: operations["getMixPresets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MixSuggestion: {
            /** @example mix_01JBNCX8QF0A1Z2Y3X4W5V6U7T */
            suggestion_id: string;
            track_id: string;
            analysis_summary?: components["schemas"]["AudioAnalysis"];
            suggested_effects: components["schemas"]["EffectSuggestion"][];
            reference_track?: components["schemas"]["ReferenceTrack"];
            /** Format: float */
            confidence: number;
            processing_time_ms?: number;
            /** Format: date-time */
            created_at?: string;
        };
        AudioAnalysis: {
            detected_genre?: string;
            /** @enum {string} */
            vocal_brightness?: "dark" | "moderate" | "bright";
            frequency_issues?: ("low_end_mud" | "harsh_sibilance" | "boxy_mids" | "thin_highs" | "nasal_tone")[];
            /** Format: float */
            dynamic_range_db?: number;
            /** Format: float */
            peak_level_db?: number;
            /** Format: float */
            rms_level_db?: number;
            spectral_balance?: {
                lows?: number;
                mids?: number;
                highs?: number;
            };
        };
        EffectSuggestion: {
            /** @enum {string} */
            effect_type: "eq" | "compressor" | "reverb" | "delay" | "de-esser" | "limiter" | "saturation" | "exciter";
            effect_id: string;
            preset_name?: string;
            /** @description Effect-specific parameters */
            parameters: {
                [key: string]: unknown;
            };
            /** @description Human-readable explanation */
            reason: string;
            /** Format: float */
            confidence_score?: number;
            /** @description Position in effect chain */
            order?: number;
        };
        VocalProfile: {
            lowest_note?: string;
            highest_note?: string;
            range_semitones?: number;
            /** @enum {string} */
            skill_level?: "beginner" | "intermediate" | "advanced";
            strengths?: string[];
        };
        StylePreferences: {
            favorite_genres?: string[];
            favorite_artists?: string[];
            preferred_tempo?: string[];
        };
        ReferenceTrack: {
            artist?: string;
            song?: string;
            /** Format: uri */
            audio_url?: string;
            /** Format: float */
            similarity_score?: number;
        };
        MixAppliedResponse: {
            track_id?: string;
            mix_version_id?: string;
            applied_effects?: string[];
            /**
             * Format: uri
             * @description URL to mixed audio file
             */
            audio_url?: string;
            /** Format: float */
            processing_time_sec?: number;
        };
        MixComparison: {
            track_id?: string;
            comparisons?: {
                mix_version_id?: string;
                name?: string;
                audio_url?: string;
                metrics?: components["schemas"]["MixMetrics"];
            }[];
        };
        MixMetrics: {
            /** Format: float */
            loudness_lufs?: number;
            /** Format: float */
            dynamic_range_db?: number;
            /** Format: float */
            spectral_balance_score?: number;
            /** Format: float */
            clarity_score?: number;
            overall_quality_score?: number;
        };
        MixPreset: {
            preset_id?: string;
            name?: string;
            description?: string;
            genre?: string;
            effects?: {
                effect_type?: string;
                parameters?: {
                    [key: string]: unknown;
                };
            }[];
            /** Format: uri */
            preview_audio_url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getMixSuggestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example trk_001 */
                    track_id: string;
                    /**
                     * Format: uri
                     * @example s3://bucket/recordings/track_001.wav
                     */
                    audio_url: string;
                    user_id?: string;
                    vocal_profile?: components["schemas"]["VocalProfile"];
                    style_preferences?: components["schemas"]["StylePreferences"];
                    reference_track?: components["schemas"]["ReferenceTrack"];
                    /**
                     * @default standard
                     * @enum {string}
                     */
                    analysis_depth?: "quick" | "standard" | "deep";
                };
            };
        };
        responses: {
            /** @description Mix suggestions generated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MixSuggestion"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    applyMixSuggestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    track_id: string;
                    suggestion_id: string;
                    /** @description User adjustments to suggested parameters */
                    adjustments?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description Mix applied successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MixAppliedResponse"];
                };
            };
            /** @description Track or suggestion not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    compareMixes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    track_id: string;
                    /** @description Array of mix version IDs to compare */
                    mix_versions: string[];
                };
            };
        };
        responses: {
            /** @description Mix comparison results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MixComparison"];
                };
            };
        };
    };
    getMixPresets: {
        parameters: {
            query?: {
                genre?: "country" | "pop" | "rock" | "r&b" | "indie" | "electronic";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of mix presets */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MixPreset"][];
                };
            };
        };
    };
}
