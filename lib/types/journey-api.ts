/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/journey/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a new adaptive journey */
        post: operations["startJourney"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journey/{journeyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get journey status and progress */
        get: operations["getJourney"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journey/{journeyId}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume a paused journey */
        post: operations["resumeJourney"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journey/{journeyId}/stages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all stages for a journey */
        get: operations["getJourneyStages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/journey/{journeyId}/stages/{stageId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a journey stage as complete */
        post: operations["completeStage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Journey: {
            /** @example jrn_01JBNCX8QF0A1Z2Y3X4W5V6U7T */
            id: string;
            user_id: string;
            /** @enum {string} */
            journey_type: "record_song" | "expand_range" | "improve_control" | "build_confidence";
            /** @enum {string} */
            status: "active" | "paused" | "completed" | "abandoned";
            /** @enum {string} */
            difficulty?: "easy" | "medium" | "hard";
            estimated_weeks?: number;
            current_stage?: number;
            total_stages?: number;
            /** Format: float */
            progress_percentage?: number;
            vocal_profile?: components["schemas"]["VocalProfile"];
            style_preferences?: components["schemas"]["StylePreferences"];
            milestones?: components["schemas"]["Milestone"][];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at?: string;
        };
        JourneyStage: {
            id?: string;
            stage_number?: number;
            name?: string;
            description?: string;
            /** @enum {string} */
            status?: "pending" | "active" | "completed" | "skipped";
            /** @description Name of widget to display for this stage */
            widget_name?: string;
            estimated_duration_min?: number;
            /** Format: date-time */
            completed_at?: string;
        };
        VocalProfile: {
            /** @example A2 */
            lowest_note?: string;
            /** @example D5 */
            highest_note?: string;
            range_semitones?: number;
            /** @enum {string} */
            skill_level?: "beginner" | "intermediate" | "advanced";
            /** Format: float */
            pitch_accuracy?: number;
            /** Format: float */
            control_score?: number;
            strengths?: string[];
            areas_to_improve?: string[];
        };
        StylePreferences: {
            favorite_genres?: string[];
            favorite_artists?: string[];
            vocalist_influences?: string[];
            preferred_tempo?: string[];
            emotional_themes?: string[];
            /** @enum {string} */
            songwriting_interest?: "yes-experienced" | "yes-beginner" | "maybe" | "no";
        };
        Milestone: {
            id?: string;
            title?: string;
            description?: string;
            week_number?: number;
            /** @enum {string} */
            status?: "pending" | "completed";
            /** Format: date-time */
            completed_at?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    startJourney: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example usr_abc123 */
                    user_id: string;
                    /** @enum {string} */
                    journey_type: "record_song" | "expand_range" | "improve_control" | "build_confidence";
                    /**
                     * @description Daily practice commitment
                     * @enum {string}
                     */
                    timeframe?: "15min" | "30min" | "60min";
                    vocal_profile: components["schemas"]["VocalProfile"];
                    style_preferences: components["schemas"]["StylePreferences"];
                    focus_areas?: ("breath-control" | "pitch-accuracy" | "vocal-range" | "tone-quality" | "rhythm-timing" | "dynamics")[];
                };
            };
        };
        responses: {
            /** @description Journey created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Journey"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJourney: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                journeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Journey details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Journey"];
                };
            };
            /** @description Journey not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resumeJourney: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                journeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Journey resumed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Journey"];
                };
            };
            /** @description Journey not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Journey already active */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJourneyStages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                journeyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of journey stages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JourneyStage"][];
                };
            };
        };
    };
    completeStage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                journeyId: string;
                stageId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    performance_data?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description Stage completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JourneyStage"];
                };
            };
        };
    };
}
