import*as t from"tone";import{w as e}from"./svelte-vendor.js";const i=new class{isDevelopment;constructor(){this.isDevelopment="production"!==process.env.NODE_ENV}formatMessage(t,e,i){const s=(new Date).toISOString(),n=i?` ${JSON.stringify(i)}`:"";return`[${s}] [${t.toUpperCase()}]${n} ${e}`}log(t,e,i){this.formatMessage(t,e,i),"debug"===t&&this.isDevelopment}debug(t,e){this.log("debug",t,e)}info(t,e){this.log("info",t,e)}warn(t,e){this.log("warn",t,e)}error(t,e){this.log("error",t,e)}};var s=(t=>(t.NOT_INITIALIZED="NOT_INITIALIZED",t.ALREADY_INITIALIZED="ALREADY_INITIALIZED",t.AUDIO_CONTEXT_ERROR="AUDIO_CONTEXT_ERROR",t.AUDIO_CONTEXT_SUSPENDED="AUDIO_CONTEXT_SUSPENDED",t.AUDIO_CONTEXT_CLOSED="AUDIO_CONTEXT_CLOSED",t.TRACK_NOT_FOUND="TRACK_NOT_FOUND",t.TRACK_ALREADY_EXISTS="TRACK_ALREADY_EXISTS",t.INVALID_TRACK_TYPE="INVALID_TRACK_TYPE",t.CLIP_NOT_FOUND="CLIP_NOT_FOUND",t.INVALID_CLIP_DATA="INVALID_CLIP_DATA",t.EFFECT_NOT_FOUND="EFFECT_NOT_FOUND",t.INVALID_EFFECT_TYPE="INVALID_EFFECT_TYPE",t.RECORDING_NOT_STARTED="RECORDING_NOT_STARTED",t.RECORDING_ALREADY_STARTED="RECORDING_ALREADY_STARTED",t.MICROPHONE_ACCESS_DENIED="MICROPHONE_ACCESS_DENIED",t.INVALID_PARAMETER="INVALID_PARAMETER",t.PARAMETER_OUT_OF_RANGE="PARAMETER_OUT_OF_RANGE",t.BUFFER_DECODE_ERROR="BUFFER_DECODE_ERROR",t.BUFFER_NOT_FOUND="BUFFER_NOT_FOUND",t.NETWORK_ERROR="NETWORK_ERROR",t.FILE_LOAD_ERROR="FILE_LOAD_ERROR",t.EXPORT_ERROR="EXPORT_ERROR",t.UNSUPPORTED_FORMAT="UNSUPPORTED_FORMAT",t.UNKNOWN_ERROR="UNKNOWN_ERROR",t.OPERATION_FAILED="OPERATION_FAILED",t))(s||{});class n extends Error{code;timestamp;constructor(t,e="UNKNOWN_ERROR"){super(t),this.name="AudioEngineError",this.code=e,this.timestamp=Date.now(),Error.captureStackTrace&&Error.captureStackTrace(this,n)}toJSON(){return{name:this.name,message:this.message,code:this.code,timestamp:this.timestamp,stack:this.stack}}}class r extends n{trackId;constructor(t,e,i){super(t,e),this.name="TrackError",this.trackId=i}}class a extends n{effectId;constructor(t,e,i){super(t,e),this.name="EffectError",this.effectId=i}}class o extends n{constructor(t,e){super(t,e),this.name="RecordingError"}}class h{id;trackId;buffer;startTime;duration;offset;gain;fadeIn;fadeOut;name;_isLooped=!1;_playbackRate=1;constructor(t){if(!t.buffer)throw new n("Clip requires an audio buffer",s.INVALID_CLIP_DATA);if(0>t.startTime)throw new n("Clip start time cannot be negative",s.INVALID_PARAMETER);if(this.id=t.id||this.generateId(),this.trackId=t.trackId,this.buffer=t.buffer,this.startTime=t.startTime,this.duration=t.duration??t.buffer.duration,this.offset=t.offset??0,this.gain=t.gain??1,this.fadeIn=t.fadeIn??0,this.fadeOut=t.fadeOut??0,this.name=t.name??`Clip ${this.id.slice(0,8)}`,0>=this.duration)throw new n("Clip duration must be positive",s.INVALID_PARAMETER);if(this.offset+this.duration>this.buffer.duration)throw new n("Clip duration + offset exceeds buffer length",s.INVALID_PARAMETER)}get endTime(){return this.startTime+this.duration}get isLooped(){return this._isLooped}set isLooped(t){this._isLooped=t}get playbackRate(){return this._playbackRate}set playbackRate(t){if(0>=t)throw new n("Playback rate must be positive",s.INVALID_PARAMETER);this._playbackRate=t}contains(t){return t>=this.startTime&&t<this.endTime}overlaps(t){return this.startTime<t.endTime&&this.endTime>t.startTime}moveTo(t){if(0>t)throw new n("Cannot move clip to negative time",s.INVALID_PARAMETER);this.startTime=t}trimStart(t){if(0>t)throw new n("Trim amount cannot be negative",s.INVALID_PARAMETER);const e=this.duration-t;if(0>=e)throw new n("Trim would result in zero or negative duration",s.INVALID_PARAMETER);this.offset+=t,this.duration=e,this.startTime+=t}trimEnd(t){if(0>t)throw new n("Trim amount cannot be negative",s.INVALID_PARAMETER);const e=this.duration-t;if(0>=e)throw new n("Trim would result in zero or negative duration",s.INVALID_PARAMETER);this.duration=e}split(t){if(!this.contains(t))return null;const e=t-this.startTime,i=e,s=this.duration-e;this.duration=i;const n=new h({trackId:this.trackId,buffer:this.buffer,startTime:t,duration:s,offset:this.offset+e,gain:this.gain,fadeIn:0,fadeOut:this.fadeOut});return this.fadeOut=0,n}clone(){return new h({trackId:this.trackId,buffer:this.buffer,startTime:this.startTime,duration:this.duration,offset:this.offset,gain:this.gain,fadeIn:this.fadeIn,fadeOut:this.fadeOut,name:`${this.name} (copy)`})}toJSON(){return{id:this.id,trackId:this.trackId,startTime:this.startTime,duration:this.duration,offset:this.offset,gain:this.gain,fadeIn:this.fadeIn,fadeOut:this.fadeOut,name:this.name,isLooped:this._isLooped,playbackRate:this._playbackRate,bufferDuration:this.buffer.duration,bufferChannels:this.buffer.numberOfChannels,bufferSampleRate:this.buffer.sampleRate}}generateId(){return`clip-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}}function c(t,e,i=1,s=0){const n=Math.round(t/e);let r=n*e;s>0&&n%2==1&&(r+=e*s*.5);const a=t+(r-t)*i;return Math.max(0,a)}class l{id;trackId;name;startTime;duration;notes=[];controlChanges=[];pitchBends=[];programChanges=[];selectedNoteIds=new Set;constructor(t){this.id=t.id||this.generateId(),this.trackId=t.trackId,this.name=t.name||`MIDI Clip ${this.id.slice(0,8)}`,this.startTime=t.startTime,t.duration?this.duration=t.duration:t.notes&&t.notes.length>0?this.duration=this.calculateDuration(t.notes):this.duration=4,t.notes&&t.notes.forEach(t=>this.addNote(t)),t.controlChanges&&(this.controlChanges=[...t.controlChanges]),t.pitchBends&&(this.pitchBends=[...t.pitchBends]),t.programChanges&&(this.programChanges=[...t.programChanges])}get endTime(){return this.startTime+this.duration}addNote(t){if(0>t.time||t.time+t.duration>this.duration)throw new n("Note is outside clip bounds",s.INVALID_PARAMETER);this.notes.push(t),this.sortNotes()}removeNote(t){const e=this.notes.findIndex(e=>e.id===t);return-1!==e&&(this.notes.splice(e,1),this.selectedNoteIds.delete(t),!0)}updateNote(t,e){const i=this.notes.find(e=>e.id===t);return!!i&&(Object.assign(i,e),this.sortNotes(),!0)}getNotes(){return[...this.notes]}getNotesInRange(t,e){return this.notes.filter(i=>{const s=i.time,n=i.time+i.duration;return e>s&&n>t})}getNote(t){return this.notes.find(e=>e.id===t)}selectNotes(t,e=!1){e||this.selectedNoteIds.clear(),t.forEach(t=>this.selectedNoteIds.add(t))}deselectNotes(t){t.forEach(t=>this.selectedNoteIds.delete(t))}clearSelection(){this.selectedNoteIds.clear()}getSelectedNotes(){return this.notes.filter(t=>this.selectedNoteIds.has(t.id))}isNoteSelected(t){return this.selectedNoteIds.has(t)}transposeSelected(t){this.getSelectedNotes().forEach(e=>{const i=Math.max(0,Math.min(127,e.pitch+t));e.pitch=i})}duplicateSelected(t=1){const e=[];return this.getSelectedNotes().forEach(i=>{const s={...i,id:this.generateId(),time:i.time+t};s.time+s.duration>this.duration||(this.addNote(s),e.push(s))}),e}deleteSelected(){const t=Array.from(this.selectedNoteIds);let e=0;return t.forEach(t=>{this.removeNote(t)&&e++}),this.selectedNoteIds.clear(),e}scaleVelocity(t){this.getSelectedNotes().forEach(e=>{e.velocity=Math.max(1,Math.min(127,Math.round(e.velocity*t)))})}quantize(t,e=120,i=!1){const s=i?this.getSelectedNotes():this.notes;if(0===s.length)return;const n=function(t,e,i=120){const s=function(t,e=120){const i=60/e;switch(t){case"1/1":return 4*i;case"1/2":return 2*i;case"1/4":default:return i;case"1/8":return i/2;case"1/16":return i/4;case"1/32":return i/8;case"1/64":return i/16;case"1/4T":return 2*i/3;case"1/8T":return i/3;case"1/16T":return i/6}}(e.grid,i),n=e.strength??1,r=e.swing??0;return t.map(t=>{const i={...t};if(!1!==e.quantizeNoteStarts){const a=t.time,o=c(a,s,n,r);if(i.time=o,e.quantizeNoteEnds){const e=c(a+t.duration,s,n,r);i.duration=Math.max(.01,e-o)}else{const e=a+t.duration;i.duration=Math.max(.01,e-o)}}else if(e.quantizeNoteEnds){const e=c(t.time+t.duration,s,n,r);i.duration=Math.max(.01,e-t.time)}return i})}(s,t,e);n.forEach((t,e)=>{const i=s[e];i.time=t.time,i.duration=t.duration}),this.sortNotes()}humanize(t=.5,e=!1){const i=e?this.getSelectedNotes():this.notes;if(0===i.length)return;const s=function(t,e=.5){return t.map(t=>{const i=.01*(Math.random()-.5)*e,s=Math.round(20*(Math.random()-.5)*e);return{...t,time:Math.max(0,t.time+i),velocity:Math.max(1,Math.min(127,t.velocity+s))}})}(i,t);s.forEach((t,e)=>{const s=i[e];s.time=t.time,s.velocity=t.velocity}),this.sortNotes()}makeLegato(t=.001,e=!1){const i=e?this.getSelectedNotes():this.notes;if(0===i.length)return;const s=function(t,e=.001){const i=[...t].sort((t,e)=>t.time!==e.time?t.time-e.time:t.pitch-e.pitch);return i.map((t,s)=>{const n=i.slice(s+1).find(e=>e.pitch===t.pitch&&e.time>t.time);if(n){const i=n.time-t.time-e;if(i>0)return{...t,duration:i}}return t})}(i,t);s.forEach((t,e)=>{i[e].duration=t.duration})}makeStaccato(t=.5,e=!1){const i=e?this.getSelectedNotes():this.notes;if(0===i.length)return;const s=function(t,e=.5,i=.05){return t.map(t=>({...t,duration:Math.max(i,t.duration*e)}))}(i,t);s.forEach((t,e)=>{i[e].duration=t.duration})}addControlChange(t){this.controlChanges.push(t),this.controlChanges.sort((t,e)=>t.time-e.time)}getControlChanges(){return[...this.controlChanges]}getControlChangesInRange(t,e){return this.controlChanges.filter(i=>i.time>=t&&i.time<=e)}addPitchBend(t){this.pitchBends.push(t),this.pitchBends.sort((t,e)=>t.time-e.time)}getPitchBends(){return[...this.pitchBends]}moveTo(t){if(0>t)throw new n("Start time cannot be negative",s.INVALID_PARAMETER);this.startTime=t}split(t){if(0>=t||t>=this.duration)return null;const e=this.duration,i=this.notes.filter(e=>e.time>=t),s=this.notes.filter(e=>e.time<t);s.forEach(e=>{e.time+e.duration>t&&(e.duration=t-e.time)});const n=i.map(e=>({...e,id:this.generateId(),time:e.time-t}));return this.notes=s,this.duration=t,new l({trackId:this.trackId,name:`${this.name} (split)`,startTime:this.startTime+t,duration:e-t,notes:n})}clone(){return new l({trackId:this.trackId,name:`${this.name} (copy)`,startTime:this.startTime,duration:this.duration,notes:this.notes.map(t=>({...t,id:this.generateId()})),controlChanges:this.controlChanges.map(t=>({...t,id:this.generateId()})),pitchBends:this.pitchBends.map(t=>({...t,id:this.generateId()})),programChanges:this.programChanges.map(t=>({...t,id:this.generateId()}))})}contains(t){return t>=this.startTime&&t<this.endTime}overlaps(t){return this.startTime<t.endTime&&this.endTime>t.startTime}calculateDuration(t){if(0===t.length)return 4;const e=Math.max(...t.map(t=>t.time+t.duration));return.5*Math.ceil(e/.5)}sortNotes(){this.notes.sort((t,e)=>t.time!==e.time?t.time-e.time:t.pitch-e.pitch)}generateId(){return`midi-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}toJSON(){return{id:this.id,trackId:this.trackId,name:this.name,startTime:this.startTime,duration:this.duration,notes:this.getNotes(),controlChanges:this.getControlChanges(),pitchBends:this.getPitchBends(),programChanges:[...this.programChanges]}}static fromJSON(t){return new l(t)}}class d{midiAccess=null;activeInput=null;recordingState=null;instruments=new Map;defaultInstrument=null;scheduledEvents=new Map;constructor(){this.initializeDefaultInstrument()}async initialize(){if(!navigator.requestMIDIAccess)return i.error("WebMIDI not supported in this browser"),!1;try{return this.midiAccess=await navigator.requestMIDIAccess(),i.info("MIDI access granted"),!0}catch(t){return i.error("MIDI access denied:",t),!1}}getInputs(){return this.midiAccess?Array.from(this.midiAccess.inputs.values()):[]}selectInput(t){if(!this.midiAccess)return!1;if(this.activeInput&&(this.activeInput.onmidimessage=null),t){const e=this.midiAccess.inputs.get(t);if(e)return this.activeInput=e,!0}else{const t=this.getInputs();if(t.length>0)return this.activeInput=t[0],!0}return!1}startRecording(e){if(!this.activeInput)throw new n("No MIDI input selected",s.INVALID_PARAMETER);if(this.recordingState?.isRecording)throw new n("Already recording",s.RECORDING_ALREADY_STARTED);this.recordingState={isRecording:!0,startTime:t.now(),events:[],activeNotes:new Map},this.activeInput.onmidimessage=t=>{this.handleMIDIMessage(t)},i.info("MIDI recording started")}stopRecording(t){if(!this.recordingState?.isRecording)throw new n("Not recording",s.RECORDING_NOT_STARTED);this.recordingState.isRecording=!1,this.activeInput&&(this.activeInput.onmidimessage=null);const e=this.processRecordedEvents();if(0===e.length)return i.warn("No notes recorded"),this.recordingState=null,null;const r=new l({trackId:t,name:`MIDI Recording ${(new Date).toLocaleTimeString()}`,startTime:0,notes:e});return this.recordingState=null,i.info(`MIDI recording stopped: ${e.length} notes`),r}handleMIDIMessage(t){if(!this.recordingState?.isRecording)return;const[e,i,s]=t.data,n=240&e,r=15&e,a=t.timeStamp/1e3-this.recordingState.startTime;switch(n){case 144:s>0?this.recordingState.activeNotes.set(i,{startTime:a,velocity:s}):this.handleNoteOff(i,a);break;case 128:this.handleNoteOff(i,a);break;case 176:this.recordingState.events.push({type:"cc",data:{id:this.generateId(),controller:i,value:s,time:a,channel:r}});break;case 224:const t=(s<<7|i)-8192;this.recordingState.events.push({type:"pitchBend",data:{id:this.generateId(),value:t,time:a,channel:r}})}}handleNoteOff(t,e){if(!this.recordingState)return;const i=this.recordingState.activeNotes.get(t);if(i){const s={id:this.generateId(),pitch:t,velocity:i.velocity,time:i.startTime,duration:e-i.startTime};this.recordingState.events.push({type:"note",data:s}),this.recordingState.activeNotes.delete(t)}}processRecordedEvents(){if(!this.recordingState)return[];const e=this.recordingState.events.filter(t=>"note"===t.type).map(t=>t.data);return this.recordingState.activeNotes.forEach((i,s)=>{const n=t.now()-this.recordingState.startTime-i.startTime;e.push({id:this.generateId(),pitch:s,velocity:i.velocity,time:i.startTime,duration:Math.max(.1,n)})}),e}initializeDefaultInstrument(){this.defaultInstrument=new t.PolySynth(t.Synth,{maxPolyphony:128,volume:-6}).toDestination()}createInstrument(e,i){let s;switch(i.type){case"synth":s=(new t.Synth).toDestination();break;case"polySynth":s=new t.PolySynth(t.Synth,{maxPolyphony:i.polyphony||32,...i.options||{}}).toDestination();break;case"membraneSynth":s=(new t.MembraneSynth).toDestination();break;case"fmSynth":s=(new t.FMSynth).toDestination();break;case"sampler":s=new t.Sampler(i.options||{}).toDestination();break;default:s=(new t.PolySynth).toDestination()}return void 0!==i.volume&&(s.volume.value=i.volume),this.instruments.set(e,s),s}getInstrument(t){return this.instruments.get(t)||this.defaultInstrument}scheduleClip(e,i){const s=this.getInstrument(i);if(!s)return;const n=[];e.getNotes().forEach(i=>{const r=e.startTime+i.time,a=new t.ToneEvent(e=>{const n=t.Frequency(i.pitch,"midi").toFrequency(),r=i.velocity/127;s.triggerAttackRelease?s.triggerAttackRelease(n,i.duration,e,r):s.triggerAttack&&s.triggerRelease&&(s.triggerAttack(n,e,r),s.triggerRelease(n,e+i.duration))});a.start(r),n.push(a)}),this.scheduledEvents.set(e.id,n)}stopClip(t){const e=this.scheduledEvents.get(t);e&&(e.forEach(t=>t.dispose()),this.scheduledEvents.delete(t))}stopAll(){this.scheduledEvents.forEach(t=>{t.forEach(t=>t.dispose())}),this.scheduledEvents.clear(),this.instruments.forEach(t=>{t.releaseAll&&t.releaseAll()})}dispose(){this.stopAll(),this.instruments.forEach(t=>{t.dispose&&t.dispose()}),this.instruments.clear(),this.defaultInstrument&&(this.defaultInstrument.dispose(),this.defaultInstrument=null),this.activeInput&&(this.activeInput.onmidimessage=null,this.activeInput=null)}generateId(){return`midi-event-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}}let u=null;function m(){return u||(u=new d),u}class p{effects;input;output;effectsStore;constructor(){this.effects=[],this.input=new t.Gain(1),this.output=new t.Gain(1),this.input.connect(this.output),this.effectsStore=e([])}addEffect(t,e){if(this.effects.some(e=>e.id===t.id))throw new a(`Effect with id ${t.id} already exists in rack`,s.EFFECT_NOT_FOUND,t.id);void 0===e||0>e||e>this.effects.length?this.effects.push(t):this.effects.splice(e,0,t),this.rebuildChain(),this.effectsStore.set([...this.effects])}removeEffect(t){const e=this.effects.findIndex(e=>e.id===t);if(-1===e)throw new a(`Effect with id ${t} not found in rack`,s.EFFECT_NOT_FOUND,t);const i=this.effects[e];this.effects.splice(e,1),i.dispose(),this.rebuildChain(),this.effectsStore.set([...this.effects])}reorderEffect(t,e){if(0>t||t>=this.effects.length)throw new a(`Invalid fromIndex: ${t}`,s.INVALID_PARAMETER);if(0>e||e>=this.effects.length)throw new a(`Invalid toIndex: ${e}`,s.INVALID_PARAMETER);const[i]=this.effects.splice(t,1);this.effects.splice(e,0,i),this.rebuildChain(),this.effectsStore.set([...this.effects])}getEffect(t){return this.effects.find(e=>e.id===t)}getEffects(){return[...this.effects]}get length(){return this.effects.length}get isEmpty(){return 0===this.effects.length}clear(){this.effects.forEach(t=>t.dispose()),this.effects=[],this.rebuildChain(),this.effectsStore.set([])}rebuildChain(){if(this.input.disconnect(),this.effects.forEach(t=>t.disconnect()),0===this.effects.length)this.input.connect(this.output);else{this.input.connect(this.effects[0].input);for(let t=0;t<this.effects.length-1;t++)this.effects[t].connect(this.effects[t+1].input);this.effects[this.effects.length-1].connect(this.output)}}getInput(){return this.input}getOutput(){return this.output}connect(t){this.output.connect(t)}disconnect(){this.output.disconnect()}bypassAll(t){this.effects.forEach(e=>{e.setEnabled(!t)})}getCPUUsage(){const t=this.effects.filter(t=>t.isEnabled()).length;return Math.min(.05*t,1)}toJSON(){return{effects:this.effects.map(t=>t.toJSON())}}dispose(){this.clear(),this.input.dispose(),this.output.dispose()}}class g{id;name;type;color;input;output;channel;effectsRack;clips=[];midiClips=[];players=new Map;recorder=null;recordingInput=null;isRecording=!1;instrument=null;sends=new Map;meter;constructor(e){this.id=e.id||this.generateId(),this.name=e.name,this.type=e.type,this.color=e.color||this.generateRandomColor(),this.input=new t.Gain(1),this.channel=new t.Channel({volume:0,pan:0,mute:!1,solo:!1}),this.output=new t.Gain(1),this.effectsRack=new p,this.meter=new t.Meter({channels:2,smoothing:.8}),this.input.connect(this.effectsRack.getInput()),this.effectsRack.connect(this.channel),this.channel.connect(this.meter),this.meter.connect(this.output)}async loadAudio(e){try{const s=new t.Player(e);await s.load(e),this.players.set(e,s),s.connect(this.input),i.info(`Track ${this.name}: Loaded audio from ${e}`)}catch(t){throw new r(`Failed to load audio: ${t}`,s.FILE_LOAD_ERROR,this.id)}}addClip(t){t.trackId!==this.id&&(t.trackId=this.id),this.clips.push(t),this.scheduleClip(t)}removeClip(t){const e=this.clips.findIndex(e=>e.id===t);if(-1!==e){const t=this.clips[e];this.unscheduleClip(t),this.clips.splice(e,1)}}getClips(){return[...this.clips]}addMIDIClip(t){t.trackId!==this.id&&(t.trackId=this.id),this.midiClips.push(t),this.scheduleMIDIClip(t)}removeMIDIClip(t){const e=this.midiClips.findIndex(e=>e.id===t);if(-1!==e){const t=this.midiClips[e];this.unscheduleMIDIClip(t),this.midiClips.splice(e,1)}}getMIDIClips(){return[...this.midiClips]}getAllClips(){return[...this.clips,...this.midiClips]}scheduleClip(e){const i=new t.Player(e.buffer);i.connect(this.input),t.getTransport().schedule(t=>{i.start(t,e.offset,e.duration)},e.startTime),this.players.set(e.id,i)}unscheduleClip(t){const e=this.players.get(t.id);e&&(e.stop(),e.dispose(),this.players.delete(t.id))}scheduleMIDIClip(t){m().scheduleClip(t,this.id)}unscheduleMIDIClip(t){m().stopClip(t.id)}async startRecording(){if("audio"!==this.type)throw new o("Only audio tracks can record",s.INVALID_TRACK_TYPE);if(this.isRecording)throw new o("Track is already recording",s.RECORDING_ALREADY_STARTED);try{this.recorder=new t.Recorder,this.recordingInput=new t.UserMedia,await this.recordingInput.open(),this.recordingInput.connect(this.recorder),this.recordingInput.connect(this.input),this.recorder.start(),this.isRecording=!0,i.info(`Track ${this.name}: Recording started`)}catch(t){throw new o(`Failed to start recording: ${t}`,s.MICROPHONE_ACCESS_DENIED)}}async stopRecording(){if(!this.isRecording||!this.recorder)throw new o("Track is not recording",s.RECORDING_NOT_STARTED);try{const e=await this.recorder.stop();this.isRecording=!1,this.recordingInput&&(this.recordingInput.close(),this.recordingInput.dispose(),this.recordingInput=null);const s=await e.arrayBuffer(),n=await t.getContext().decodeAudioData(s),r=t.getTransport().seconds,a=new h({trackId:this.id,buffer:n,startTime:r,duration:n.duration,name:`Recording ${(new Date).toISOString()}`});return this.addClip(a),i.info(`Track ${this.name}: Recording stopped, clip created`),n}catch(t){throw new o(`Failed to stop recording: ${t}`,s.OPERATION_FAILED)}finally{this.recorder&&(this.recorder.dispose(),this.recorder=null)}}startMIDIRecording(){if("midi"!==this.type)throw new o("Only MIDI tracks can record MIDI",s.INVALID_TRACK_TYPE);if(this.isRecording)throw new o("Track is already recording",s.RECORDING_ALREADY_STARTED);try{m().startRecording(this.id),this.isRecording=!0,i.info(`Track ${this.name}: MIDI recording started`)}catch(t){throw new o(`Failed to start MIDI recording: ${t}`,s.OPERATION_FAILED)}}stopMIDIRecording(){if(!this.isRecording)throw new o("Track is not recording",s.RECORDING_NOT_STARTED);try{const t=m().stopRecording(this.id);return this.isRecording=!1,t?(this.addMIDIClip(t),i.info(`Track ${this.name}: MIDI recording stopped, clip created`)):i.warn(`Track ${this.name}: MIDI recording stopped, no notes recorded`),t}catch(t){throw this.isRecording=!1,new o(`Failed to stop MIDI recording: ${t}`,s.OPERATION_FAILED)}}setMIDIInstrument(t){if("midi"!==this.type)throw new r("Only MIDI tracks can have instruments",s.INVALID_TRACK_TYPE,this.id);const e=m();this.instrument=e.createInstrument(this.id,t),this.instrument&&this.instrument.connect&&this.instrument.connect(this.input),i.info(`Track ${this.name}: MIDI instrument set to ${t.type}`)}getMIDIInstrument(){return this.instrument}addEffect(t){this.effectsRack.addEffect(t)}removeEffect(t){this.effectsRack.removeEffect(t)}getEffects(){return this.effectsRack.getEffects()}getEffectsRack(){return this.effectsRack}sendTo(e,i){const s=this.sends.get(e.id);s&&s.dispose();const n=new t.Send(i);this.channel.connect(n),n.connect(e.input),this.sends.set(e.id,n)}removeSend(t){const e=this.sends.get(t);e&&(e.dispose(),this.sends.delete(t))}setVolume(t){this.channel.volume.rampTo(t,.1)}getVolume(){return this.channel.volume.value}setPan(t){if(-1>t||t>1)throw new r("Pan value must be between -1 and 1",s.PARAMETER_OUT_OF_RANGE,this.id);this.channel.pan.value=t}getPan(){return this.channel.pan.value}setMute(t){this.channel.mute=t}isMuted(){return this.channel.mute}setSolo(t){this.channel.solo=t}isSoloed(){return this.channel.solo}getLevel(){return this.meter.getValue()}connect(t){this.output.connect(t)}disconnect(){this.output.disconnect()}toJSON(){return{id:this.id,name:this.name,type:this.type,color:this.color,volume:this.getVolume(),pan:this.getPan(),mute:this.isMuted(),solo:this.isSoloed(),effects:this.effectsRack.toJSON(),clips:this.clips.map(t=>t.toJSON()),midiClips:this.midiClips.map(t=>t.toJSON())}}dispose(){if(this.isRecording)if("audio"===this.type)this.stopRecording().catch(i.error);else if("midi"===this.type)try{this.stopMIDIRecording()}catch(t){i.error(t)}this.players.forEach(t=>t.dispose()),this.players.clear(),this.midiClips.forEach(t=>{this.unscheduleMIDIClip(t)}),this.midiClips=[],this.instrument&&this.instrument.dispose&&(this.instrument.dispose(),this.instrument=null),this.sends.forEach(t=>t.dispose()),this.sends.clear(),this.effectsRack.dispose(),this.input.dispose(),this.channel.dispose(),this.meter.dispose(),this.output.dispose(),this.clips=[]}generateId(){return`track-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}generateRandomColor(){const t=["#FF6B6B","#4ECDC4","#45B7D1","#FFA07A","#98D8C8","#F7DC6F","#BB8FCE","#85C1E2"];return t[Math.floor(Math.random()*t.length)]}}class f{channel;limiter;meter;analyser;peakLeft=-1/0;peakRight=-1/0;peakDecayRate=.95;peakHoldTime=1e3;lastPeakTime=0;isClipping=!1;clippingThreshold=-.1;clippingResetTime=100;lastClipTime=0;constructor(e={}){this.channel=new t.Channel({volume:e.volume??0,pan:0,mute:!1,solo:!1}),this.limiter=new t.Limiter(e.limiterThreshold??-.5),this.meter=new t.Meter({channels:2,smoothing:e.meterSmoothingFactor??.8}),this.analyser=new t.Analyser({type:"fft",size:1024,smoothing:.8}),this.channel.chain(this.limiter,this.meter,this.analyser,t.getDestination())}setVolume(t){this.channel.volume.rampTo(t,.1)}getVolume(){return this.channel.volume.value}setMute(t){this.channel.mute=t}isMuted(){return this.channel.mute}getLevel(){const t=this.meter.getValue(),e=Date.now();let i,s;Array.isArray(t)?(i=t[0],s=t[1]):i=s=t,i>this.peakLeft?(this.peakLeft=i,this.lastPeakTime=e):e-this.lastPeakTime>this.peakHoldTime&&(this.peakLeft*=this.peakDecayRate),s>this.peakRight?(this.peakRight=s,this.lastPeakTime=e):e-this.lastPeakTime>this.peakHoldTime&&(this.peakRight*=this.peakDecayRate);const n=Math.max(i,s);return n>this.clippingThreshold?(this.isClipping=!0,this.lastClipTime=e):e-this.lastClipTime>this.clippingResetTime&&(this.isClipping=!1),{left:i,right:s,peak:n,rms:(Math.abs(i)+Math.abs(s))/2}}getSpectrum(){return this.analyser.getValue()}getWaveform(){const t=this.analyser.type;this.analyser.type="waveform";const e=this.analyser.getValue();return this.analyser.type=t,e}isOutputClipping(){return this.isClipping}resetPeaks(){this.peakLeft=-1/0,this.peakRight=-1/0,this.isClipping=!1}setLimiterThreshold(t){i.warn("Limiter threshold cannot be changed dynamically. Create a new MasterBus instance.")}connect(t){t.connect(this.channel)}getInput(){return this.channel}connectTo(t){this.analyser.connect(t)}disconnect(){this.analyser.disconnect()}debug(){const t=this.getLevel();return{volume:this.channel.volume.value,isMuted:this.channel.mute,limiterThreshold:-.5,meterLevel:t,isClipping:this.isClipping,peakLeft:this.peakLeft,peakRight:this.peakRight}}dispose(){this.channel.dispose(),this.limiter.dispose(),this.meter.dispose(),this.analyser.dispose()}}class I{static instance;listeners;constructor(){this.listeners=new Map}static getInstance(){return I.instance||(I.instance=new I),I.instance}emit(t,e){const s={type:t,payload:e,timestamp:Date.now()},n=this.listeners.get(t);n&&n.forEach(e=>{try{e(s)}catch(e){i.error(`Error in event handler for ${t}:`,e)}}),"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent(t,{detail:s}))}on(t,e){return this.listeners.has(t)||this.listeners.set(t,new Set),this.listeners.get(t).add(e),()=>{this.off(t,e)}}once(t,e){const i=s=>{e(s),this.off(t,i)};return this.on(t,i)}off(t,e){const i=this.listeners.get(t);i&&(i.delete(e),0===i.size&&this.listeners.delete(t))}removeAllListeners(t){t?this.listeners.delete(t):this.listeners.clear()}listenerCount(t){const e=this.listeners.get(t);return e?e.size:0}eventTypes(){return Array.from(this.listeners.keys())}clear(){this.listeners.clear()}debug(){i.info("Total event types with listeners:",this.listeners.size),this.listeners.forEach((t,e)=>{i.info(`  ${e}: ${t.size} listener(s)`)})}}const T=I.getInstance();class R{lanes;recording=!1;recordingLaneId=null;constructor(){this.lanes=new Map}createLane(t,e,i="linear"){const s=this.generateId(),n={id:s,targetId:t,parameterName:e,points:[],curveType:i,enabled:!0};return this.lanes.set(s,n),s}addPoint(t,e,i){const s=this.lanes.get(t);if(!s)throw new Error(`Automation lane ${t} not found`);const n={time:e,value:i},r=s.points.findIndex(t=>t.time>e);-1===r?s.points.push(n):s.points[r]?.time===e?s.points[r]=n:s.points.splice(r,0,n)}removePoint(t,e,i=.001){const s=this.lanes.get(t);if(!s)return;const n=s.points.findIndex(t=>Math.abs(t.time-e)<i);-1!==n&&s.points.splice(n,1)}removePointsInRange(t,e,i){const s=this.lanes.get(t);s&&(s.points=s.points.filter(t=>t.time<e||t.time>i))}getValueAtTime(t,e){const i=this.lanes.get(t);if(!i||!i.enabled||0===i.points.length)return null;let s=null,n=null;for(let t=0;t<i.points.length;t++){const r=i.points[t];if(r.time>e||(s=r),r.time>=e&&!n){n=r;break}}return s?n?s.time===e?s.value:this.interpolate(s,n,e,i.curveType):s.value:n?n.value:null}interpolate(t,e,i,s){const n=(i-t.time)/(e.time-t.time);switch(s){case"linear":default:return t.value+(e.value-t.value)*n;case"exponential":if(0>=t.value||0>=e.value)return t.value+(e.value-t.value)*n;const i=e.value/t.value;return t.value*Math.pow(i,n);case"step":return t.value}}startRecording(t){if(!this.lanes.get(t))throw new Error(`Automation lane ${t} not found`);this.recording=!0,this.recordingLaneId=t}stopRecording(){this.recording=!1,this.recordingLaneId=null}recordPoint(t,e){this.recording&&this.recordingLaneId&&this.addPoint(this.recordingLaneId,t,e)}isRecording(){return this.recording}getRecordingLaneId(){return this.recordingLaneId}getLanesForTarget(t){return Array.from(this.lanes.values()).filter(e=>e.targetId===t)}getLane(t){return this.lanes.get(t)}getAllLanes(){return Array.from(this.lanes.values())}deleteLane(t){this.lanes.delete(t)}setLaneEnabled(t,e){const i=this.lanes.get(t);i&&(i.enabled=e)}setCurveType(t,e){const i=this.lanes.get(t);i&&(i.curveType=e)}applyToOfflineParam(t,e,i,s=0,n){const r=this.lanes.get(t);if(!r||!r.enabled||0===r.points.length)return;const a=n||i.length/i.sampleRate;for(const t of r.points)if(t.time>=s&&t.time<=a){const i=t.time-s;e.setValueAtTime(t.value,i)}}applyToRealtimeParam(t,e,i){const s=this.getValueAtTime(t,i);null!==s&&(void 0!==e.value?e.value=s:e.setValueAtTime(s,i))}toJSON(){return{lanes:Array.from(this.lanes.values())}}fromJSON(t){if(this.lanes.clear(),t.lanes)for(const e of t.lanes)this.lanes.set(e.id,e)}generateId(){return`automation-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}clear(){this.lanes.clear(),this.recording=!1,this.recordingLaneId=null}}class E{context;analyser;splitter;leftAnalyser;rightAnalyser;freqData;timeData;leftTimeData;rightTimeData;peakHold=0;peakHoldTime=0;peakHoldDuration=2e3;rmsHistory=[];maxHistorySize=300;constructor(t){this.context=t,this.analyser=t.createAnalyser(),this.analyser.fftSize=2048,this.analyser.smoothingTimeConstant=.8,this.splitter=t.createChannelSplitter(2),this.leftAnalyser=t.createAnalyser(),this.rightAnalyser=t.createAnalyser(),this.leftAnalyser.fftSize=2048,this.rightAnalyser.fftSize=2048,this.analyser.connect(this.splitter),this.splitter.connect(this.leftAnalyser,0),this.splitter.connect(this.rightAnalyser,1),this.freqData=new Float32Array(this.analyser.frequencyBinCount),this.timeData=new Float32Array(this.analyser.fftSize),this.leftTimeData=new Float32Array(this.leftAnalyser.fftSize),this.rightTimeData=new Float32Array(this.rightAnalyser.fftSize)}connect(t){t.connect(this.analyser)}disconnect(){this.analyser.disconnect()}getSpectrumData(){this.analyser.getFloatFrequencyData(this.freqData);const t=this.analyser.frequencyBinCount,e=new Float32Array(t),i=this.context.sampleRate/2;for(let s=0;t>s;s++)e[s]=s/t*i;return{frequencies:e,magnitudes:this.freqData.slice(0),binCount:t,sampleRate:this.context.sampleRate}}getPeakData(t=100){this.analyser.getFloatTimeDomainData(this.timeData);const e=[],i=Math.floor(this.timeData.length/t);let s=0,n=0,r=0;for(let a=0;t>a;a++){const t=a*i,o=Math.min(t+i,this.timeData.length);let h=0,c=0;for(let e=t;o>e;e++){const t=Math.abs(this.timeData[e]);h=Math.max(h,t),c+=t*t,t>n&&(n=t,r=e/this.timeData.length)}e.push(h),s+=c}return{peaks:e,rms:Math.sqrt(s/this.timeData.length),peakLevel:n,peakPosition:r}}getLoudnessData(){this.leftAnalyser.getFloatTimeDomainData(this.leftTimeData),this.rightAnalyser.getFloatTimeDomainData(this.rightTimeData);let t=0,e=0;for(let i=0;i<this.leftTimeData.length;i++){const s=this.leftTimeData[i],n=this.rightTimeData[i],r=(s+n)/2;t+=r*r,e=Math.max(e,Math.abs(s),Math.abs(n))}const i=Math.sqrt(t/this.leftTimeData.length),s=20*Math.log10(Math.max(i,1e-10)),n=20*Math.log10(Math.max(e,1e-10));this.rmsHistory.push(i),this.rmsHistory.length>this.maxHistorySize&&this.rmsHistory.shift();const r=Math.min(30,this.rmsHistory.length);let a=0;for(let t=this.rmsHistory.length-r;t<this.rmsHistory.length;t++)a+=this.rmsHistory[t]*this.rmsHistory[t];const o=Math.sqrt(a/r),h=this.convertToLUFS(o);let c=0;for(const t of this.rmsHistory)c+=t*t;const l=Math.sqrt(c/this.rmsHistory.length),d=this.convertToLUFS(l),u=this.convertToLUFS(i),m=Date.now();return(e>this.peakHold||m-this.peakHoldTime>this.peakHoldDuration)&&(this.peakHold=e,this.peakHoldTime=m),{integrated:d,shortTerm:h,momentary:u,rms:s,peak:n,truePeak:20*Math.log10(Math.max(this.peakHold,1e-10))}}convertToLUFS(t){return 20*Math.log10(Math.max(t,1e-10))-.691}getPhaseCorrelation(){this.leftAnalyser.getFloatTimeDomainData(this.leftTimeData),this.rightAnalyser.getFloatTimeDomainData(this.rightTimeData);let t=0,e=0,i=0,s=0,n=0;for(let r=0;r<this.leftTimeData.length;r++){const a=this.leftTimeData[r],o=this.rightTimeData[r];t+=a,e+=o,i+=a*a,s+=o*o,n+=a*o}const r=this.leftTimeData.length,a=t/r,o=e/r,h=n-r*a*o,c=Math.sqrt((i-r*a*a)*(s-r*o*o)),l=0!==c?h/c:0,d=Math.sqrt(i/r),u=Math.sqrt(s/r),m=0!==u?d/u:1;return{correlation:Math.max(-1,Math.min(1,l)),balance:m}}reset(){this.peakHold=0,this.peakHoldTime=0,this.rmsHistory=[]}setPeakHoldDuration(t){this.peakHoldDuration=t}setFFTSize(t){this.analyser.fftSize=t,this.leftAnalyser.fftSize=t,this.rightAnalyser.fftSize=t,this.freqData=new Float32Array(this.analyser.frequencyBinCount),this.timeData=new Float32Array(this.analyser.fftSize),this.leftTimeData=new Float32Array(this.leftAnalyser.fftSize),this.rightTimeData=new Float32Array(this.rightAnalyser.fftSize)}setSmoothingTimeConstant(t){this.analyser.smoothingTimeConstant=Math.max(0,Math.min(1,t)),this.leftAnalyser.smoothingTimeConstant=this.analyser.smoothingTimeConstant,this.rightAnalyser.smoothingTimeConstant=this.analyser.smoothingTimeConstant}dispose(){this.analyser.disconnect(),this.splitter.disconnect(),this.leftAnalyser.disconnect(),this.rightAnalyser.disconnect()}}class y{recorder=null;takes=[];currentPassIndex=0;state="idle";loopStartBar=0;loopEndBar=0;recordingTrackId=null;countInTimer=null;metronome;metronomeGain;constructor(){this.metronome=new t.MembraneSynth({pitchDecay:.05,octaves:10,oscillator:{type:"sine"},envelope:{attack:.001,decay:.3,sustain:0,release:.01}}),this.metronomeGain=new t.Gain(.3),this.metronome.connect(this.metronomeGain),this.metronomeGain.toDestination()}async startLoopRecording(e){if("idle"!==this.state)throw new Error("Recording already in progress");return this.takes=[],this.currentPassIndex=0,this.loopStartBar=0,this.loopEndBar=e.bars,t.getTransport().loop=!0,t.getTransport().loopStart=`${this.loopStartBar}:0:0`,t.getTransport().loopEnd=`${this.loopEndBar}:0:0`,this.recordingTrackId=this.generateId(),await this.startCountIn(e.countInBars||1,e.metronomeVolume||.3),this.state="recording",await this.setupRecorder(),this.setupLoopListeners(),t.getTransport().start(),T.emit("recording:started",{trackId:this.recordingTrackId,bars:e.bars}),{trackId:this.recordingTrackId}}async stopRecording(){if("recording"!==this.state)throw new Error("No recording in progress");if(this.state="processing",t.getTransport().stop(),this.recorder){const t=await this.recorder.stop();await this.processTake(t,this.currentPassIndex),this.recorder.dispose(),this.recorder=null}return t.getTransport().loop=!1,this.state="idle",T.emit("recording:stopped",{trackId:this.recordingTrackId,takeCount:this.takes.length}),this.takes}getTakes(){return[...this.takes]}getState(){return this.state}getCurrentPassIndex(){return this.currentPassIndex}setMetronomeVolume(t){this.metronomeGain.gain.value=Math.max(0,Math.min(1,t))}async startCountIn(e,i){this.state="counting-in",this.setMetronomeVolume(i);const s=4*e;return new Promise(e=>{let i=0;const n=t.getTransport().scheduleRepeat(r=>{const a=Math.floor(i/4)+1,o=i%4+1,h=1===o?"C5":"C4";this.metronome.triggerAttackRelease(h,"8n",r),T.emit("recording:countIn",{bar:a,beat:o,total:s,remaining:s-i-1}),i++,s>i||(t.getTransport().clear(n),e())},"4n","0:0:0");t.getTransport().start()})}async setupRecorder(){const e=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!1,noiseSuppression:!1,autoGainControl:!1,sampleRate:48e3}});this.recorder=new t.Recorder;const i=t.context.createMediaStreamSource(e),s=new t.Gain(1);i.connect(s.input),s.connect(this.recorder),await this.recorder.start()}setupLoopListeners(){t.Time(`${this.loopEndBar}:0:0`).toSeconds(),t.getTransport().scheduleRepeat(async t=>{if("recording"===this.state&&this.recorder){const t=await this.recorder.stop();await this.processTake(t,this.currentPassIndex),this.currentPassIndex++,await this.recorder.start(),T.emit("recording:loopComplete",{passIndex:this.currentPassIndex,totalTakes:this.takes.length})}},`${this.loopEndBar}m`,"0:0:0")}async processTake(e,i){const s=await e.arrayBuffer(),n=await t.context.decodeAudioData(s),r=this.calculateMetrics(n),a={id:this.generateId(),passIndex:i,startBar:this.loopStartBar,endBar:this.loopEndBar,clip:n,metrics:r,timestamp:new Date};this.takes.push(a),T.emit("recording:takeCreated",{takeId:a.id,passIndex:i,metrics:r})}calculateMetrics(t){const e=t.getChannelData(0),i=e.length;let s=0,n=0;for(let t=0;i>t;t++){const i=Math.abs(e[t]);s=Math.max(s,i),n+=i*i}const r=Math.sqrt(n/i),a=20*Math.log10(Math.max(s,1e-10)),o=20*Math.log10(Math.max(r,1e-10)),h=Array.from(e).map(Math.abs).sort((t,e)=>t-e)[Math.floor(.1*i)];return{peakDb:a,rmsDb:o,snr:a-20*Math.log10(Math.max(h,1e-10)),timingErrorMs:this.calculateTimingError(t)}}calculateTimingError(e){const i=60/t.getTransport().bpm.value,s=e.getChannelData(0);let n=-1;for(let t=1;t<s.length;t++)if(Math.abs(s[t])>.1&&Math.abs(s[t])>Math.abs(s[t-1])){n=t;break}if(-1===n)return 0;const r=n/e.sampleRate,a=Math.round(r/i)*i;return 1e3*Math.abs(r-a)}generateId(){return`take-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}dispose(){this.recorder&&(this.recorder.dispose(),this.recorder=null),this.countInTimer&&(clearTimeout(this.countInTimer),this.countInTimer=null),this.metronome.dispose(),this.metronomeGain.dispose()}}class A{static instance;context;transport;isInitialized=!1;tracks;masterBus;automation;analyzer;recordingManager;_isPlaying=!1;_isRecording=!1;constructor(e={}){const s={sampleRate:48e3,latencyHint:"interactive",lookAhead:.1,...e};this.context=new AudioContext({latencyHint:s.latencyHint,sampleRate:s.sampleRate}),t.setContext(this.context),this.transport=t.getTransport(),this.transport.lookAhead=s.lookAhead,this.tracks=new Map,this.masterBus=new f,this.automation=new R,this.analyzer=new E(this.context),this.recordingManager=new y,i.info("AudioEngine: Created instance",{sampleRate:this.context.sampleRate,latencyHint:s.latencyHint,state:this.context.state})}static getInstance(t){return A.instance||(A.instance=new A(t)),A.instance}async initialize(){if(this.isInitialized)i.warn("AudioEngine: Already initialized");else try{await this.context.resume(),await t.start(),this.isInitialized=!0,i.info("AudioEngine: Initialized",{sampleRate:this.context.sampleRate,baseLatency:this.context.baseLatency,outputLatency:this.context.outputLatency,state:this.context.state}),T.emit("playback:play",{initialized:!0})}catch(t){throw new n(`Failed to initialize audio engine: ${t}`,s.AUDIO_CONTEXT_ERROR)}}get initialized(){return this.isInitialized}addTrack(t){const e=new g(t);return e.connect(this.masterBus.getInput()),this.tracks.set(e.id,e),i.info(`AudioEngine: Added track "${e.name}" (${e.id})`),T.emit("track:created",{trackId:e.id,name:e.name}),e}removeTrack(t){const e=this.tracks.get(t);if(!e)throw new n(`Track ${t} not found`,s.TRACK_NOT_FOUND);e.disconnect(),e.dispose(),this.tracks.delete(t),i.info(`AudioEngine: Removed track ${t}`),T.emit("track:deleted",{trackId:t})}getTrack(t){return this.tracks.get(t)}getAllTracks(){return Array.from(this.tracks.values())}get trackCount(){return this.tracks.size}play(){this.ensureInitialized(),this._isPlaying?i.warn("AudioEngine: Already playing"):(this.transport.start(),this._isPlaying=!0,i.info("AudioEngine: Playback started"),T.emit("playback:play",{time:this.transport.seconds}))}stop(){this.ensureInitialized(),this._isPlaying&&(this.transport.stop(),this._isPlaying=!1,i.info("AudioEngine: Playback stopped"),T.emit("playback:stop",{time:this.transport.seconds}))}pause(){this.ensureInitialized(),this._isPlaying&&(this.transport.pause(),this._isPlaying=!1,i.info("AudioEngine: Playback paused"),T.emit("playback:pause",{time:this.transport.seconds}))}get isPlaying(){return this._isPlaying}async startRecording(t){this.ensureInitialized();const e=this.getTrack(t);if(!e)throw new n(`Track ${t} not found`,s.TRACK_NOT_FOUND);await e.startRecording(),this._isRecording=!0,i.info(`AudioEngine: Recording started on track ${t}`),T.emit("playback:record-start",{trackId:t})}async stopRecording(t){this.ensureInitialized();const e=this.getTrack(t);if(!e)throw new n(`Track ${t} not found`,s.TRACK_NOT_FOUND);const r=await e.stopRecording();return this._isRecording=!1,i.info(`AudioEngine: Recording stopped on track ${t}`),T.emit("playback:record-stop",{trackId:t,duration:r.duration}),r}get isRecording(){return this._isRecording}async startLoopRecording(t){this.ensureInitialized();const e=await this.recordingManager.startLoopRecording(t);return this._isRecording=!0,i.info(`AudioEngine: Loop recording started on track ${e.trackId}`),e}async stopLoopRecording(){this.ensureInitialized();const t=await this.recordingManager.stopRecording();return this._isRecording=!1,i.info(`AudioEngine: Loop recording stopped, ${t.length} takes captured`),t}getRecordingState(){return this.recordingManager.getState()}getTakes(){return this.recordingManager.getTakes()}setMetronomeVolume(t){if(0>t||t>1)throw new n("Metronome volume must be between 0 and 1",s.PARAMETER_OUT_OF_RANGE);this.recordingManager.setMetronomeVolume(t),i.info(`AudioEngine: Metronome volume set to ${t}`)}getRecordingManager(){return this.recordingManager}setTempo(t){if(20>t||t>999)throw new n("Tempo must be between 20 and 999 BPM",s.PARAMETER_OUT_OF_RANGE);this.transport.bpm.value=t,i.info(`AudioEngine: Tempo set to ${t} BPM`)}getTempo(){return this.transport.bpm.value}setTimeSignature(t,e=4){this.transport.timeSignature=[t,e],i.info(`AudioEngine: Time signature set to ${t}/${e}`)}getTimeSignature(){return this.transport.timeSignature}setLoop(t,e,s=!0){this.transport.loop=s,this.transport.loopStart=t,this.transport.loopEnd=e,i.info(`AudioEngine: Loop ${s?"enabled":"disabled"} [${t}s - ${e}s]`)}getCurrentTime(){return this.transport.seconds}setCurrentTime(t){this.transport.seconds=t}connectEffect(t,e){const r=this.getTrack(t);if(!r)throw new n(`Track ${t} not found`,s.TRACK_NOT_FOUND);r.addEffect(e),i.info(`AudioEngine: Added effect to track ${t}`),T.emit("effect:added",{trackId:t,effectId:e.id})}routeToSend(t,e,r){const a=this.getTrack(t),o=this.getTrack(e);if(!a)throw new n(`Track ${t} not found`,s.TRACK_NOT_FOUND);if(!o)throw new n(`Track ${e} not found`,s.TRACK_NOT_FOUND);a.sendTo(o,r),i.info(`AudioEngine: Routed track ${t} to ${e} (amount: ${r})`)}getAutomation(){return this.automation}createAutomationLane(t,e,i="linear"){return this.automation.createLane(t,e,i)}addAutomationPoint(t,e,i){this.automation.addPoint(t,e,i),T.emit("automation:pointAdded",{laneId:t,time:e,value:i})}removeAutomationPoint(t,e){this.automation.removePoint(t,e),T.emit("automation:pointRemoved",{laneId:t,time:e})}startAutomationRecording(t){this.automation.startRecording(t),i.info(`AudioEngine: Started automation recording for lane ${t}`),T.emit("automation:recordingStarted",{laneId:t})}stopAutomationRecording(){this.automation.stopRecording(),i.info("AudioEngine: Stopped automation recording"),T.emit("automation:recordingStopped",{})}getAutomationValueAtTime(t,e){const i=e??this.getCurrentTime();return this.automation.getValueAtTime(t,i)}getAnalyzer(){return this.analyzer}getSpectrumData(){return this.analyzer.getSpectrumData()}getPeakData(t){return this.analyzer.getPeakData(t)}getLoudnessData(){return this.analyzer.getLoudnessData()}getPhaseCorrelation(){return this.analyzer.getPhaseCorrelation()}resetAnalysis(){this.analyzer.reset()}async renderOffline(t,e=2){const s=t+e,n=this.context.sampleRate,r=Math.floor(s*n);i.info(`AudioEngine: Starting offline render (${s}s @ ${n}Hz)`);const a=new OfflineAudioContext(2,r,n),o=Array.from(this.tracks.values()).filter(t=>!t.isMuted()),h=a.createGain();let c;c=0===o.length?.1:1===o.length?.5:o.length>3?.6/Math.sqrt(o.length):.8,h.gain.value=c,h.connect(a.destination),i.info(`AudioEngine: Rendering ${o.length} tracks (master: ${c.toFixed(3)})`);const l=(t,e,i,s)=>{const n=e.getEffects();if(0===n.length)return t.connect(s),t;let r=t;for(const t of n){const e=i.createGain();r=t.applyToOfflineContext(i,r,e)}return r.connect(s),r};for(const e of o){const n=e.getClips(),r=e.getEffects().length;if(0===n.length){const s=440+200*Math.random(),n=a.createOscillator(),c=a.createGain();n.frequency.value=s,n.type="sine";const d=e.getVolume();let u;u=void 0!==d&&0!==d?Math.pow(10,d/20):1===o.length?.32:o.length>3?.15:.2,c.gain.value=u,c.gain.setValueAtTime(0,0),c.gain.linearRampToValueAtTime(c.gain.value,.01),c.gain.setValueAtTime(c.gain.value,t-.05),c.gain.linearRampToValueAtTime(0,t),n.connect(c),l(c,e,a,h),n.start(0),n.stop(t),i.info(`  Track "${e.name}": Generated test tone at ${s.toFixed(0)}Hz (${r} effects)`)}else for(const t of n)if(t.startTime<s){const n=a.createBufferSource(),o=a.createGain();n.buffer=t.buffer,n.playbackRate.value=t.playbackRate||1;const c=e.getVolume(),d=Math.pow(10,c/20);o.gain.value=d*t.gain,n.connect(o),l(o,e,a,h);const u=t.startTime,m=t.offset,p=Math.min(t.duration,s-u);n.start(u,m,p),i.info(`  Track "${e.name}": Clip at ${u.toFixed(2)}s, duration ${p.toFixed(2)}s (${r} effects)`)}}if(0===o.length){i.info("  No active tracks, generating test tone");const e=a.createOscillator(),s=a.createGain();e.frequency.value=440,e.type="sine",s.gain.value=.05,e.connect(s),s.connect(h),e.start(0),e.stop(Math.min(1,t))}i.info("AudioEngine: Rendering...");const d=await a.startRendering();return i.info("AudioEngine: Offline render complete"),d}async exportMix(e="wav"){this.ensureInitialized();try{const s=new t.Recorder;this.masterBus.connectTo(s),s.start();const n=this._isPlaying;n||this.play();const r=this.transport.loopEnd||60;await new Promise(t=>setTimeout(t,1e3*r)),n||this.stop();const a=await s.stop();return s.dispose(),i.info(`AudioEngine: Mix exported as ${e}`),a}catch(t){throw new n(`Failed to export mix: ${t}`,s.EXPORT_ERROR)}}getLatency(){return this.context.baseLatency+this.context.outputLatency}getCPULoad(){const t=.02*this.getAllTracks().filter(t=>!t.isMuted()).length+.05*this.getAllTracks().reduce((t,e)=>t+e.getEffects().length,0);return Math.min(t,1)}getMasterBus(){return this.masterBus}ensureInitialized(){if(!this.isInitialized)throw new n("AudioEngine not initialized. Call initialize() first.",s.NOT_INITIALIZED)}debug(){i.info("Initialized:",this.isInitialized),i.info("Context State:",this.context.state),i.info("Sample Rate:",this.context.sampleRate),i.info("Latency:",this.getLatency(),"seconds"),i.info("CPU Load:",(100*this.getCPULoad()).toFixed(1),"%"),i.info("Tracks:",this.tracks.size),i.info("Is Playing:",this._isPlaying),i.info("Is Recording:",this._isRecording),i.info("Tempo:",this.getTempo(),"BPM"),i.info("Time Signature:",this.getTimeSignature().join("/")),i.info("Current Time:",this.getCurrentTime().toFixed(2),"s")}dispose(){this._isPlaying&&this.stop(),this.tracks.forEach(t=>t.dispose()),this.tracks.clear(),this.masterBus.dispose(),this.context.close(),this.isInitialized=!1,i.info("AudioEngine: Disposed")}}export{A,I as E,i as l};
