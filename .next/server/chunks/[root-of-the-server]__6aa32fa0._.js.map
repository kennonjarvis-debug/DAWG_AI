{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/lib/db/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\n// PrismaClient singleton pattern for Next.js\n// Prevents multiple instances during hot reloading in development\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,6CAA6C;AAC7C,kEAAkE;AAElE,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO,GAAG;AAC7E;AAEF,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;uCAEe","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/lib/auth/auth-options.ts"],"sourcesContent":["// NextAuth.js configuration for DAWG AI\nimport { NextAuthOptions } from 'next-auth';\nimport GithubProvider from 'next-auth/providers/github';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport { compare } from 'bcryptjs';\nimport prisma from '@/lib/db/prisma';\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n\n  providers: [\n    // GitHub OAuth (for easy development)\n    GithubProvider({\n      clientId: process.env.GITHUB_ID || '',\n      clientSecret: process.env.GITHUB_SECRET || '',\n    }),\n\n    // Email/Password authentication\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error('Email and password required');\n        }\n\n        // Find user by email\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email }\n        });\n\n        if (!user) {\n          throw new Error('No user found with this email');\n        }\n\n        // Verify password (stored in user preferences for simplicity)\n        // In production, use a separate UserCredentials table\n        const passwordHash = user.preferences as any;\n\n        if (!passwordHash?.password) {\n          throw new Error('Password not set for this user');\n        }\n\n        const isValid = await compare(credentials.password, passwordHash.password);\n\n        if (!isValid) {\n          throw new Error('Invalid password');\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image,\n        };\n      }\n    })\n  ],\n\n  pages: {\n    signIn: '/auth/signin',  // Custom sign-in page (Instance 1 will build)\n    error: '/auth/error',\n  },\n\n  session: {\n    strategy: 'jwt',  // Use JWT instead of database sessions for better performance\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n\n  callbacks: {\n    async jwt({ token, user }) {\n      // Add user ID to JWT token\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n\n    async session({ session, token }) {\n      // Add user ID to session\n      if (session.user) {\n        (session.user as any).id = token.id;\n      }\n      return session;\n    },\n  },\n\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === 'development',\n};\n"],"names":[],"mappings":"AAAA,wCAAwC;;;;;AAExC;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,IAAA,qMAAa,EAAC,8IAAM;IAE7B,WAAW;QACT,sCAAsC;QACtC,IAAA,8KAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS,IAAI;YACnC,cAAc,QAAQ,GAAG,CAAC,aAAa,IAAI;QAC7C;QAEA,gCAAgC;QAChC,IAAA,mLAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,qBAAqB;gBACrB,MAAM,OAAO,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAC;gBACpC;gBAEA,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,MAAM;gBAClB;gBAEA,8DAA8D;gBAC9D,sDAAsD;gBACtD,MAAM,eAAe,KAAK,WAAW;gBAErC,IAAI,CAAC,cAAc,UAAU;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,UAAU,MAAM,IAAA,4JAAO,EAAC,YAAY,QAAQ,EAAE,aAAa,QAAQ;gBAEzE,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;gBACnB;YACF;QACF;KACD;IAED,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IAEA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IAEA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,2BAA2B;YAC3B,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,yBAAyB;YACzB,IAAI,QAAQ,IAAI,EAAE;gBACf,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;YACrC;YACA,OAAO;QACT;IACF;IAEA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO,oDAAyB;AAClC","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// NextAuth.js API route handler\nimport NextAuth from 'next-auth';\nimport { authOptions } from '@/lib/auth/auth-options';\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST, authOptions };\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;;AAChC;AACA;;;AAEA,MAAM,UAAU,IAAA,gKAAQ,EAAC,6JAAW","debugId":null}}]
}