{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/app/api/command-center/route.ts"],"sourcesContent":["/**\n * Command Center API\n * Real-time agent monitoring, task management, and status reporting\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { promises as fs } from 'fs';\nimport * as path from 'path';\nimport * as yaml from 'js-yaml';\n\n// ============================================================================\n// Types\n// ============================================================================\n\ninterface AgentInstance {\n  name: string;\n  status: 'active' | 'idle' | 'error' | 'offline';\n  currentTask?: string;\n  lastActivity: string;\n  tasksCompleted: number;\n  uptime: number;\n  cpu?: number;\n  memory?: number;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  assignedTo: string | null;\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  blockers?: string[];\n  dependencies?: string[];\n  estimatedHours?: number;\n  actualHours?: number;\n  createdAt: string;\n  updatedAt: string;\n  tags?: string[];\n}\n\ninterface Blocker {\n  taskId: string;\n  taskTitle: string;\n  reason: string;\n  blockedSince: string;\n  assignedTo: string | null;\n}\n\ninterface CommandCenterData {\n  timestamp: string;\n  agents: AgentInstance[];\n  tasks: Task[];\n  blockers: Blocker[];\n  statistics: {\n    totalTasks: number;\n    activeTasks: number;\n    completedTasks: number;\n    blockedTasks: number;\n    activeAgents: number;\n    idleAgents: number;\n    averageTaskTime: number;\n  };\n}\n\n// ============================================================================\n// Helper Functions\n// ============================================================================\n\nasync function getAgentInstances(): Promise<AgentInstance[]> {\n  const agents: AgentInstance[] = [];\n  const voiceDir = path.join(process.cwd(), 'agents', 'voice');\n\n  try {\n    const voiceFiles = await fs.readdir(voiceDir);\n\n    for (const file of voiceFiles) {\n      if (!file.endsWith('.yaml')) continue;\n\n      try {\n        const content = await fs.readFile(path.join(voiceDir, file), 'utf-8');\n        const agent = yaml.load(content) as any;\n\n        // Try to get runtime status from monitor scripts\n        const status = await getAgentStatus(agent.name);\n\n        agents.push({\n          name: agent.name,\n          status: status.status,\n          currentTask: status.currentTask,\n          lastActivity: status.lastActivity,\n          tasksCompleted: status.tasksCompleted,\n          uptime: status.uptime,\n          cpu: status.cpu,\n          memory: status.memory,\n        });\n      } catch (error) {\n        console.error(`Failed to load agent ${file}:`, error);\n      }\n    }\n  } catch (error) {\n    console.error('Failed to read voice directory:', error);\n  }\n\n  return agents;\n}\n\nasync function getAgentStatus(agentName: string) {\n  // Check if agent monitor file exists\n  const monitorFile = path.join(process.cwd(), '.agent-status', `${agentName}.json`);\n\n  try {\n    const content = await fs.readFile(monitorFile, 'utf-8');\n    const status = JSON.parse(content);\n    return {\n      status: status.running ? 'active' : 'idle',\n      currentTask: status.currentTask || null,\n      lastActivity: status.lastActivity || new Date().toISOString(),\n      tasksCompleted: status.tasksCompleted || 0,\n      uptime: status.uptime || 0,\n      cpu: status.cpu,\n      memory: status.memory,\n    };\n  } catch {\n    return {\n      status: 'offline' as const,\n      currentTask: null,\n      lastActivity: new Date().toISOString(),\n      tasksCompleted: 0,\n      uptime: 0,\n    };\n  }\n}\n\nasync function getAllTasks(): Promise<Task[]> {\n  const tasks: Task[] = [];\n  const tasksDir = path.join(process.cwd(), 'tasks');\n\n  try {\n    const taskFiles = await fs.readdir(tasksDir);\n\n    for (const file of taskFiles) {\n      if (!file.endsWith('.yaml')) continue;\n\n      try {\n        const content = await fs.readFile(path.join(tasksDir, file), 'utf-8');\n        const task = yaml.load(content) as any;\n\n        tasks.push({\n          id: task.id || file.replace('.yaml', ''),\n          title: task.title || task.name || 'Untitled Task',\n          assignedTo: task.assigned_to || task.assignedTo || null,\n          status: task.status || 'pending',\n          priority: task.priority || 'medium',\n          blockers: task.blockers || [],\n          dependencies: task.dependencies || [],\n          estimatedHours: task.estimated_hours || task.estimatedHours,\n          actualHours: task.actual_hours || task.actualHours,\n          createdAt: task.created_at || task.createdAt || new Date().toISOString(),\n          updatedAt: task.updated_at || task.updatedAt || new Date().toISOString(),\n          tags: task.tags || [],\n        });\n      } catch (error) {\n        console.error(`Failed to parse task ${file}:`, error);\n      }\n    }\n  } catch (error) {\n    console.error('Failed to read tasks directory:', error);\n  }\n\n  return tasks;\n}\n\nfunction detectBlockers(tasks: Task[]): Blocker[] {\n  const blockers: Blocker[] = [];\n\n  for (const task of tasks) {\n    if (task.status === 'blocked' || (task.blockers && task.blockers.length > 0)) {\n      blockers.push({\n        taskId: task.id,\n        taskTitle: task.title,\n        reason: task.blockers?.join(', ') || 'No reason specified',\n        blockedSince: task.updatedAt,\n        assignedTo: task.assignedTo,\n      });\n    }\n  }\n\n  return blockers;\n}\n\nfunction calculateStatistics(agents: AgentInstance[], tasks: Task[]) {\n  const activeAgents = agents.filter(a => a.status === 'active').length;\n  const idleAgents = agents.filter(a => a.status === 'idle').length;\n\n  const totalTasks = tasks.length;\n  const activeTasks = tasks.filter(t => t.status === 'in_progress').length;\n  const completedTasks = tasks.filter(t => t.status === 'completed').length;\n  const blockedTasks = tasks.filter(t => t.status === 'blocked').length;\n\n  const tasksWithTime = tasks.filter(t => t.actualHours && t.actualHours > 0);\n  const averageTaskTime = tasksWithTime.length > 0\n    ? tasksWithTime.reduce((sum, t) => sum + (t.actualHours || 0), 0) / tasksWithTime.length\n    : 0;\n\n  return {\n    totalTasks,\n    activeTasks,\n    completedTasks,\n    blockedTasks,\n    activeAgents,\n    idleAgents,\n    averageTaskTime: Math.round(averageTaskTime * 10) / 10,\n  };\n}\n\n// ============================================================================\n// GET - Get Command Center Data\n// ============================================================================\n\nexport async function GET(request: NextRequest) {\n  try {\n    const agents = await getAgentInstances();\n    const tasks = await getAllTasks();\n    const blockers = detectBlockers(tasks);\n    const statistics = calculateStatistics(agents, tasks);\n\n    const data: CommandCenterData = {\n      timestamp: new Date().toISOString(),\n      agents,\n      tasks,\n      blockers,\n      statistics,\n    };\n\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('Command Center error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch command center data' },\n      { status: 500 }\n    );\n  }\n}\n\n// ============================================================================\n// POST - Update Task Assignment\n// ============================================================================\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, taskId, assignedTo, status } = body;\n\n    if (action === 'reassign' && taskId && assignedTo !== undefined) {\n      // Update task assignment\n      const tasksDir = path.join(process.cwd(), 'tasks');\n      const taskFile = path.join(tasksDir, `${taskId}.yaml`);\n\n      try {\n        const content = await fs.readFile(taskFile, 'utf-8');\n        const task = yaml.load(content) as any;\n\n        task.assigned_to = assignedTo;\n        task.updated_at = new Date().toISOString();\n\n        await fs.writeFile(taskFile, yaml.dump(task), 'utf-8');\n\n        return NextResponse.json({ success: true, taskId, assignedTo });\n      } catch (error) {\n        return NextResponse.json(\n          { error: `Task ${taskId} not found` },\n          { status: 404 }\n        );\n      }\n    }\n\n    if (action === 'update_status' && taskId && status) {\n      // Update task status\n      const tasksDir = path.join(process.cwd(), 'tasks');\n      const taskFile = path.join(tasksDir, `${taskId}.yaml`);\n\n      try {\n        const content = await fs.readFile(taskFile, 'utf-8');\n        const task = yaml.load(content) as any;\n\n        task.status = status;\n        task.updated_at = new Date().toISOString();\n\n        await fs.writeFile(taskFile, yaml.dump(task), 'utf-8');\n\n        return NextResponse.json({ success: true, taskId, status });\n      } catch (error) {\n        return NextResponse.json(\n          { error: `Task ${taskId} not found` },\n          { status: 404 }\n        );\n      }\n    }\n\n    return NextResponse.json(\n      { error: 'Invalid action or missing parameters' },\n      { status: 400 }\n    );\n  } catch (error) {\n    console.error('Command Center POST error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update task' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AAED;AACA;AACA;AACA;;;;;AAwDA,+EAA+E;AAC/E,mBAAmB;AACnB,+EAA+E;AAE/E,eAAe;IACb,MAAM,SAA0B,EAAE;IAClC,MAAM,WAAW,yGAAS,CAAC,QAAQ,GAAG,IAAI,UAAU;IAEpD,IAAI;QACF,MAAM,aAAa,MAAM,yGAAE,CAAC,OAAO,CAAC;QAEpC,KAAK,MAAM,QAAQ,WAAY;YAC7B,IAAI,CAAC,KAAK,QAAQ,CAAC,UAAU;YAE7B,IAAI;gBACF,MAAM,UAAU,MAAM,yGAAE,CAAC,QAAQ,CAAC,yGAAS,CAAC,UAAU,OAAO;gBAC7D,MAAM,QAAQ,yKAAS,CAAC;gBAExB,iDAAiD;gBACjD,MAAM,SAAS,MAAM,eAAe,MAAM,IAAI;gBAE9C,OAAO,IAAI,CAAC;oBACV,MAAM,MAAM,IAAI;oBAChB,QAAQ,OAAO,MAAM;oBACrB,aAAa,OAAO,WAAW;oBAC/B,cAAc,OAAO,YAAY;oBACjC,gBAAgB,OAAO,cAAc;oBACrC,QAAQ,OAAO,MAAM;oBACrB,KAAK,OAAO,GAAG;oBACf,QAAQ,OAAO,MAAM;gBACvB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC,EAAE;YACjD;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;IACnD;IAEA,OAAO;AACT;AAEA,eAAe,eAAe,SAAiB;IAC7C,qCAAqC;IACrC,MAAM,cAAc,yGAAS,CAAC,QAAQ,GAAG,IAAI,iBAAiB,GAAG,UAAU,KAAK,CAAC;IAEjF,IAAI;QACF,MAAM,UAAU,MAAM,yGAAE,CAAC,QAAQ,CAAC,aAAa;QAC/C,MAAM,SAAS,KAAK,KAAK,CAAC;QAC1B,OAAO;YACL,QAAQ,OAAO,OAAO,GAAG,WAAW;YACpC,aAAa,OAAO,WAAW,IAAI;YACnC,cAAc,OAAO,YAAY,IAAI,IAAI,OAAO,WAAW;YAC3D,gBAAgB,OAAO,cAAc,IAAI;YACzC,QAAQ,OAAO,MAAM,IAAI;YACzB,KAAK,OAAO,GAAG;YACf,QAAQ,OAAO,MAAM;QACvB;IACF,EAAE,OAAM;QACN,OAAO;YACL,QAAQ;YACR,aAAa;YACb,cAAc,IAAI,OAAO,WAAW;YACpC,gBAAgB;YAChB,QAAQ;QACV;IACF;AACF;AAEA,eAAe;IACb,MAAM,QAAgB,EAAE;IACxB,MAAM,WAAW,yGAAS,CAAC,QAAQ,GAAG,IAAI;IAE1C,IAAI;QACF,MAAM,YAAY,MAAM,yGAAE,CAAC,OAAO,CAAC;QAEnC,KAAK,MAAM,QAAQ,UAAW;YAC5B,IAAI,CAAC,KAAK,QAAQ,CAAC,UAAU;YAE7B,IAAI;gBACF,MAAM,UAAU,MAAM,yGAAE,CAAC,QAAQ,CAAC,yGAAS,CAAC,UAAU,OAAO;gBAC7D,MAAM,OAAO,yKAAS,CAAC;gBAEvB,MAAM,IAAI,CAAC;oBACT,IAAI,KAAK,EAAE,IAAI,KAAK,OAAO,CAAC,SAAS;oBACrC,OAAO,KAAK,KAAK,IAAI,KAAK,IAAI,IAAI;oBAClC,YAAY,KAAK,WAAW,IAAI,KAAK,UAAU,IAAI;oBACnD,QAAQ,KAAK,MAAM,IAAI;oBACvB,UAAU,KAAK,QAAQ,IAAI;oBAC3B,UAAU,KAAK,QAAQ,IAAI,EAAE;oBAC7B,cAAc,KAAK,YAAY,IAAI,EAAE;oBACrC,gBAAgB,KAAK,eAAe,IAAI,KAAK,cAAc;oBAC3D,aAAa,KAAK,YAAY,IAAI,KAAK,WAAW;oBAClD,WAAW,KAAK,UAAU,IAAI,KAAK,SAAS,IAAI,IAAI,OAAO,WAAW;oBACtE,WAAW,KAAK,UAAU,IAAI,KAAK,SAAS,IAAI,IAAI,OAAO,WAAW;oBACtE,MAAM,KAAK,IAAI,IAAI,EAAE;gBACvB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC,EAAE;YACjD;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;IACnD;IAEA,OAAO;AACT;AAEA,SAAS,eAAe,KAAa;IACnC,MAAM,WAAsB,EAAE;IAE9B,KAAK,MAAM,QAAQ,MAAO;QACxB,IAAI,KAAK,MAAM,KAAK,aAAc,KAAK,QAAQ,IAAI,KAAK,QAAQ,CAAC,MAAM,GAAG,GAAI;YAC5E,SAAS,IAAI,CAAC;gBACZ,QAAQ,KAAK,EAAE;gBACf,WAAW,KAAK,KAAK;gBACrB,QAAQ,KAAK,QAAQ,EAAE,KAAK,SAAS;gBACrC,cAAc,KAAK,SAAS;gBAC5B,YAAY,KAAK,UAAU;YAC7B;QACF;IACF;IAEA,OAAO;AACT;AAEA,SAAS,oBAAoB,MAAuB,EAAE,KAAa;IACjE,MAAM,eAAe,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,UAAU,MAAM;IACrE,MAAM,aAAa,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,QAAQ,MAAM;IAEjE,MAAM,aAAa,MAAM,MAAM;IAC/B,MAAM,cAAc,MAAM,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,eAAe,MAAM;IACxE,MAAM,iBAAiB,MAAM,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,aAAa,MAAM;IACzE,MAAM,eAAe,MAAM,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,WAAW,MAAM;IAErE,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAA,IAAK,EAAE,WAAW,IAAI,EAAE,WAAW,GAAG;IACzE,MAAM,kBAAkB,cAAc,MAAM,GAAG,IAC3C,cAAc,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,CAAC,EAAE,WAAW,IAAI,CAAC,GAAG,KAAK,cAAc,MAAM,GACtF;IAEJ,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA,iBAAiB,KAAK,KAAK,CAAC,kBAAkB,MAAM;IACtD;AACF;AAMO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,QAAQ,MAAM;QACpB,MAAM,WAAW,eAAe;QAChC,MAAM,aAAa,oBAAoB,QAAQ;QAE/C,MAAM,OAA0B;YAC9B,WAAW,IAAI,OAAO,WAAW;YACjC;YACA;YACA;YACA;QACF;QAEA,OAAO,8JAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,8JAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF;AAMO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG;QAE/C,IAAI,WAAW,cAAc,UAAU,eAAe,WAAW;YAC/D,yBAAyB;YACzB,MAAM,WAAW,yGAAS,CAAC,QAAQ,GAAG,IAAI;YAC1C,MAAM,WAAW,yGAAS,CAAC,UAAU,GAAG,OAAO,KAAK,CAAC;YAErD,IAAI;gBACF,MAAM,UAAU,MAAM,yGAAE,CAAC,QAAQ,CAAC,UAAU;gBAC5C,MAAM,OAAO,yKAAS,CAAC;gBAEvB,KAAK,WAAW,GAAG;gBACnB,KAAK,UAAU,GAAG,IAAI,OAAO,WAAW;gBAExC,MAAM,yGAAE,CAAC,SAAS,CAAC,UAAU,yKAAS,CAAC,OAAO;gBAE9C,OAAO,8JAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;oBAAM;oBAAQ;gBAAW;YAC/D,EAAE,OAAO,OAAO;gBACd,OAAO,8JAAY,CAAC,IAAI,CACtB;oBAAE,OAAO,CAAC,KAAK,EAAE,OAAO,UAAU,CAAC;gBAAC,GACpC;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAEA,IAAI,WAAW,mBAAmB,UAAU,QAAQ;YAClD,qBAAqB;YACrB,MAAM,WAAW,yGAAS,CAAC,QAAQ,GAAG,IAAI;YAC1C,MAAM,WAAW,yGAAS,CAAC,UAAU,GAAG,OAAO,KAAK,CAAC;YAErD,IAAI;gBACF,MAAM,UAAU,MAAM,yGAAE,CAAC,QAAQ,CAAC,UAAU;gBAC5C,MAAM,OAAO,yKAAS,CAAC;gBAEvB,KAAK,MAAM,GAAG;gBACd,KAAK,UAAU,GAAG,IAAI,OAAO,WAAW;gBAExC,MAAM,yGAAE,CAAC,SAAS,CAAC,UAAU,yKAAS,CAAC,OAAO;gBAE9C,OAAO,8JAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;oBAAM;oBAAQ;gBAAO;YAC3D,EAAE,OAAO,OAAO;gBACd,OAAO,8JAAY,CAAC,IAAI,CACtB;oBAAE,OAAO,CAAC,KAAK,EAAE,OAAO,UAAU,CAAC;gBAAC,GACpC;oBAAE,QAAQ;gBAAI;YAElB;QACF;QAEA,OAAO,8JAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuC,GAChD;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,8JAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}