{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/src/components/ui/card.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport const Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`rounded-lg border bg-white shadow-sm ${className || ''}`}\n    {...props}\n  />\n));\nCard.displayName = 'Card';\n\nexport const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={`flex flex-col space-y-1.5 p-6 ${className || ''}`}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nexport const CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={`text-2xl font-semibold leading-none tracking-tight ${className || ''}`}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nexport const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={`p-6 pt-0 ${className || ''}`} {...props} />\n));\nCardContent.displayName = 'CardContent';\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;AAEO,MAAM,qBAAO,iOAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4PAAC;QACC,KAAK;QACL,WAAW,CAAC,qCAAqC,EAAE,aAAa,IAAI;QACnE,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEZ,MAAM,2BAAa,iOAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4PAAC;QACC,KAAK;QACL,WAAW,CAAC,8BAA8B,EAAE,aAAa,IAAI;QAC5D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAElB,MAAM,0BAAY,iOAAgB,CAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4PAAC;QACC,KAAK;QACL,WAAW,CAAC,mDAAmD,EAAE,aAAa,IAAI;QACjF,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAEjB,MAAM,4BAAc,iOAAgB,CAGzC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,4PAAC;QAAI,KAAK;QAAK,WAAW,CAAC,SAAS,EAAE,aAAa,IAAI;QAAG,GAAG,KAAK;;;;;;AAEpE,YAAY,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'outline';\n}\n\nexport function Badge({ className, variant = 'default', ...props }: BadgeProps) {\n  const variants = {\n    default: 'bg-gray-900 text-white',\n    outline: 'border border-gray-300 bg-transparent',\n  };\n\n  return (\n    <div\n      className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors ${variants[variant]} ${className || ''}`}\n      {...props}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;;;AAMO,SAAS,MAAM,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAmB;IAC5E,MAAM,WAAW;QACf,SAAS;QACT,SAAS;IACX;IAEA,qBACE,4PAAC;QACC,WAAW,CAAC,4FAA4F,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,IAAI;QAC/I,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/app/command-center/page.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  AlertTriangle,\n  CheckCircle2,\n  Circle,\n  Clock,\n  Cpu,\n  MemoryStick,\n  Zap,\n  Users,\n  ListTodo,\n  Activity,\n  XCircle,\n  ArrowRight,\n} from 'lucide-react';\n\n// ============================================================================\n// Types\n// ============================================================================\n\ninterface AgentInstance {\n  name: string;\n  status: 'active' | 'idle' | 'error' | 'offline';\n  currentTask?: string;\n  lastActivity: string;\n  tasksCompleted: number;\n  uptime: number;\n  cpu?: number;\n  memory?: number;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  assignedTo: string | null;\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  blockers?: string[];\n  dependencies?: string[];\n  estimatedHours?: number;\n  actualHours?: number;\n  createdAt: string;\n  updatedAt: string;\n  tags?: string[];\n}\n\ninterface Blocker {\n  taskId: string;\n  taskTitle: string;\n  reason: string;\n  blockedSince: string;\n  assignedTo: string | null;\n}\n\ninterface CommandCenterData {\n  timestamp: string;\n  agents: AgentInstance[];\n  tasks: Task[];\n  blockers: Blocker[];\n  statistics: {\n    totalTasks: number;\n    activeTasks: number;\n    completedTasks: number;\n    blockedTasks: number;\n    activeAgents: number;\n    idleAgents: number;\n    averageTaskTime: number;\n  };\n}\n\n// ============================================================================\n// Agent Status Badge\n// ============================================================================\n\nfunction AgentStatusBadge({ status }: { status: AgentInstance['status'] }) {\n  const statusConfig = {\n    active: { icon: CheckCircle2, label: 'Active', className: 'bg-green-500 text-white' },\n    idle: { icon: Circle, label: 'Idle', className: 'bg-gray-400 text-white' },\n    error: { icon: XCircle, label: 'Error', className: 'bg-red-500 text-white' },\n    offline: { icon: XCircle, label: 'Offline', className: 'bg-gray-600 text-white' },\n  };\n\n  const config = statusConfig[status];\n  const Icon = config.icon;\n\n  return (\n    <Badge className={config.className}>\n      <Icon className=\"w-3 h-3 mr-1\" />\n      {config.label}\n    </Badge>\n  );\n}\n\n// ============================================================================\n// Task Status Badge\n// ============================================================================\n\nfunction TaskStatusBadge({ status, priority }: { status: Task['status']; priority: Task['priority'] }) {\n  const statusConfig = {\n    pending: { icon: Clock, label: 'Pending', className: 'bg-gray-400 text-white' },\n    assigned: { icon: Clock, label: 'Assigned', className: 'bg-purple-500 text-white' },\n    ready: { icon: Clock, label: 'Ready', className: 'bg-indigo-500 text-white' },\n    in_progress: { icon: Zap, label: 'In Progress', className: 'bg-blue-500 text-white' },\n    completed: { icon: CheckCircle2, label: 'Completed', className: 'bg-green-500 text-white' },\n    blocked: { icon: AlertTriangle, label: 'Blocked', className: 'bg-red-500 text-white' },\n  };\n\n  const priorityConfig = {\n    low: 'border-gray-300',\n    medium: 'border-yellow-400',\n    high: 'border-orange-500',\n    critical: 'border-red-600 ring-2 ring-red-300',\n  };\n\n  // Fallback for unknown status\n  const config = statusConfig[status] || statusConfig.pending;\n  const Icon = config.icon;\n\n  return (\n    <div className={`flex items-center gap-2 border-l-4 ${priorityConfig[priority]} pl-2`}>\n      <Badge className={config.className}>\n        <Icon className=\"w-3 h-3 mr-1\" />\n        {config.label}\n      </Badge>\n      {priority === 'critical' && (\n        <Badge variant=\"destructive\" className=\"text-xs\">CRITICAL</Badge>\n      )}\n    </div>\n  );\n}\n\n// ============================================================================\n// Agent Card\n// ============================================================================\n\nfunction AgentCard({ agent }: { agent: AgentInstance }) {\n  const uptimeHours = Math.floor(agent.uptime / 3600);\n  const uptimeMinutes = Math.floor((agent.uptime % 3600) / 60);\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">{agent.name}</CardTitle>\n          <AgentStatusBadge status={agent.status} />\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2 text-sm\">\n          {agent.currentTask && (\n            <div className=\"flex items-start gap-2\">\n              <Activity className=\"w-4 h-4 mt-0.5 text-blue-500\" />\n              <div>\n                <div className=\"font-medium\">Current Task</div>\n                <div className=\"text-gray-600\">{agent.currentTask}</div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between text-gray-600\">\n            <span>Tasks Completed</span>\n            <Badge variant=\"secondary\">{agent.tasksCompleted}</Badge>\n          </div>\n\n          <div className=\"flex items-center justify-between text-gray-600\">\n            <span>Uptime</span>\n            <span className=\"font-mono text-xs\">\n              {uptimeHours}h {uptimeMinutes}m\n            </span>\n          </div>\n\n          {agent.cpu !== undefined && (\n            <div className=\"flex items-center justify-between text-gray-600\">\n              <div className=\"flex items-center gap-1\">\n                <Cpu className=\"w-3 h-3\" />\n                <span>CPU</span>\n              </div>\n              <span className=\"font-mono text-xs\">{agent.cpu.toFixed(1)}%</span>\n            </div>\n          )}\n\n          {agent.memory !== undefined && (\n            <div className=\"flex items-center justify-between text-gray-600\">\n              <div className=\"flex items-center gap-1\">\n                <MemoryStick className=\"w-3 h-3\" />\n                <span>Memory</span>\n              </div>\n              <span className=\"font-mono text-xs\">{agent.memory.toFixed(1)} MB</span>\n            </div>\n          )}\n\n          <div className=\"text-xs text-gray-400 mt-2\">\n            Last activity: {new Date(agent.lastActivity).toLocaleTimeString()}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// ============================================================================\n// Task Row\n// ============================================================================\n\nfunction TaskRow({ task, onReassign }: { task: Task; onReassign: (taskId: string, newAgent: string) => void }) {\n  const [isReassigning, setIsReassigning] = useState(false);\n  const [newAgent, setNewAgent] = useState(task.assignedTo || '');\n\n  const handleReassign = async () => {\n    if (newAgent !== task.assignedTo) {\n      await onReassign(task.id, newAgent);\n      setIsReassigning(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-4 p-3 border-b hover:bg-gray-50 transition-colors\">\n      <div className=\"flex-shrink-0 w-48\">\n        <TaskStatusBadge status={task.status} priority={task.priority} />\n      </div>\n\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"font-medium text-gray-900 truncate\">{task.title}</div>\n        <div className=\"text-xs text-gray-500 mt-1\">ID: {task.id}</div>\n        {task.tags && task.tags.length > 0 && (\n          <div className=\"flex gap-1 mt-1\">\n            {task.tags.map(tag => (\n              <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex-shrink-0 w-48\">\n        {isReassigning ? (\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={newAgent}\n              onChange={(e) => setNewAgent(e.target.value)}\n              className=\"px-2 py-1 text-sm border rounded w-32\"\n              placeholder=\"Agent name\"\n            />\n            <button\n              onClick={handleReassign}\n              className=\"px-2 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              Save\n            </button>\n            <button\n              onClick={() => setIsReassigning(false)}\n              className=\"px-2 py-1 text-xs bg-gray-300 text-gray-700 rounded hover:bg-gray-400\"\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={task.assignedTo ? 'default' : 'outline'}>\n              {task.assignedTo || 'Unassigned'}\n            </Badge>\n            <button\n              onClick={() => setIsReassigning(true)}\n              className=\"text-blue-500 hover:text-blue-700 text-xs\"\n            >\n              <ArrowRight className=\"w-4 h-4\" />\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex-shrink-0 text-xs text-gray-500\">\n        {task.estimatedHours && (\n          <div>Est: {task.estimatedHours}h</div>\n        )}\n        {task.actualHours && (\n          <div>Actual: {task.actualHours}h</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// ============================================================================\n// Blocker Alert\n// ============================================================================\n\nfunction BlockerAlert({ blocker }: { blocker: Blocker }) {\n  return (\n    <div className=\"flex items-start gap-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n      <AlertTriangle className=\"w-5 h-5 text-red-600 mt-0.5\" />\n      <div className=\"flex-1\">\n        <div className=\"font-medium text-red-900\">{blocker.taskTitle}</div>\n        <div className=\"text-sm text-red-700 mt-1\">{blocker.reason}</div>\n        <div className=\"flex items-center gap-3 mt-2 text-xs text-red-600\">\n          <span>Blocked since: {new Date(blocker.blockedSince).toLocaleString()}</span>\n          {blocker.assignedTo && (\n            <span>Assigned to: {blocker.assignedTo}</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// ============================================================================\n// Command Center Page\n// ============================================================================\n\nexport default function CommandCenterPage() {\n  const [data, setData] = useState<CommandCenterData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n\n  // Fetch command center data\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/command-center');\n      if (!response.ok) throw new Error('Failed to fetch data');\n      const newData = await response.json();\n      setData(newData);\n      setError(null);\n      setLastUpdate(new Date());\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Auto-refresh every 5 seconds (DISABLED auto-scroll by default)\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, [autoRefresh]);\n\n  // Handle task reassignment\n  const handleReassign = async (taskId: string, newAgent: string) => {\n    try {\n      const response = await fetch('/api/command-center', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'reassign',\n          taskId,\n          assignedTo: newAgent,\n        }),\n      });\n\n      if (!response.ok) throw new Error('Failed to reassign task');\n\n      // Refresh data\n      await fetchData();\n    } catch (err) {\n      console.error('Failed to reassign task:', err);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <Activity className=\"w-12 h-12 text-blue-500 animate-spin mx-auto mb-4\" />\n          <div className=\"text-gray-600\">Loading Command Center...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center text-red-600\">\n          <XCircle className=\"w-12 h-12 mx-auto mb-4\" />\n          <div>Error: {error}</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!data) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b sticky top-0 z-10 shadow-sm\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Command Center</h1>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Real-time monitoring and task management\n              </p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <label className=\"flex items-center gap-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={autoRefresh}\n                  onChange={(e) => setAutoRefresh(e.target.checked)}\n                  className=\"rounded\"\n                />\n                Auto-refresh\n              </label>\n              <button\n                onClick={fetchData}\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm\"\n              >\n                Refresh Now\n              </button>\n              <div className=\"text-xs text-gray-500\">\n                Last updated: {lastUpdate.toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-6 space-y-6\">\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Active Agents</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-600\">\n                {data.statistics.activeAgents}\n              </div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                {data.statistics.idleAgents} idle\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Active Tasks</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-blue-600\">\n                {data.statistics.activeTasks}\n              </div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                {data.statistics.totalTasks} total\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Completed</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-600\">\n                {data.statistics.completedTasks}\n              </div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Avg: {data.statistics.averageTaskTime}h\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={data.statistics.blockedTasks > 0 ? 'border-red-300 bg-red-50' : ''}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Blocked</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className={`text-3xl font-bold ${data.statistics.blockedTasks > 0 ? 'text-red-600' : 'text-gray-400'}`}>\n                {data.statistics.blockedTasks}\n              </div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                {data.statistics.blockedTasks > 0 ? 'Action required' : 'All clear'}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Blockers Alert */}\n        {data.blockers.length > 0 && (\n          <Card className=\"border-red-300\">\n            <CardHeader>\n              <CardTitle className=\"text-red-900 flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                Critical Blockers ({data.blockers.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {data.blockers.map(blocker => (\n                  <BlockerAlert key={blocker.taskId} blocker={blocker} />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Agents */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5\" />\n              Agent Instances ({data.agents.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {data.agents.map(agent => (\n                <AgentCard key={agent.name} agent={agent} />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tasks */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ListTodo className=\"w-5 h-5\" />\n              All Tasks ({data.tasks.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {/* NO AUTO-SCROLL - User can scroll manually */}\n            <div className=\"max-h-[600px] overflow-y-auto\">\n              {data.tasks.length === 0 ? (\n                <div className=\"text-center py-12 text-gray-500\">\n                  No tasks found\n                </div>\n              ) : (\n                data.tasks.map(task => (\n                  <TaskRow key={task.id} task={task} onReassign={handleReassign} />\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}