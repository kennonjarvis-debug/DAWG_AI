{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/benkennon/dawg-ai/app/api/agent-status/route.ts"],"sourcesContent":["/**\n * Agent Status API\n * Returns current status and tasks for all agents\n */\n\nimport { NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport yaml from 'js-yaml';\n\nexport const dynamic = 'force-dynamic';\n\ninterface Task {\n  id: string;\n  title: string;\n  status: 'ready' | 'in_progress' | 'blocked' | 'complete';\n  priority: string;\n  owner: string;\n  estimate?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\ninterface AgentStatus {\n  agent: string;\n  role: string;\n  tasks: Task[];\n  activeTask?: string;\n  status: 'active' | 'idle' | 'blocked';\n}\n\nconst AGENT_ROLES: Record<string, string> = {\n  alexis: 'Planner / PM',\n  tom: 'Code Assistance / Implementer',\n  jerry: 'AI Conductor / Systems Architect',\n  karen: 'Data Manager / Profiles & Policy',\n  max: 'UI / Frontend (instance-1)',\n  alex: 'Audio Engine (instance-2)',\n  'instance-1': 'UI / Frontend (Max)',\n  'instance-2': 'Audio Engine (Alex)',\n  'instance-3': 'Data Manager (Karen)',\n  'instance-4': 'Integration Specialist',\n};\n\nexport async function GET() {\n  try {\n    const tasksDir = path.join(process.cwd(), 'tasks');\n    const files = await fs.readdir(tasksDir);\n\n    const yamlFiles = files.filter((f) => f.endsWith('.yaml'));\n    const tasks: Task[] = [];\n\n    for (const file of yamlFiles) {\n      try {\n        const content = await fs.readFile(path.join(tasksDir, file), 'utf-8');\n        const task = yaml.load(content) as any;\n\n        tasks.push({\n          id: task.id || file.replace('.yaml', ''),\n          title: task.title || 'Untitled Task',\n          status: task.status || 'ready',\n          priority: task.priority || 'P2',\n          owner: task.owner || 'unassigned',\n          estimate: task.estimate,\n          created_at: task.created_at,\n          updated_at: task.updated_at,\n        });\n      } catch (error) {\n        console.error(`Failed to parse ${file}:`, error);\n      }\n    }\n\n    // Group tasks by owner\n    const agentMap = new Map<string, Task[]>();\n    for (const task of tasks) {\n      if (!agentMap.has(task.owner)) {\n        agentMap.set(task.owner, []);\n      }\n      agentMap.get(task.owner)!.push(task);\n    }\n\n    // Build agent status\n    const agents: AgentStatus[] = Object.keys(AGENT_ROLES).map((agentId) => {\n      const agentTasks = agentMap.get(agentId) || [];\n      const activeTask = agentTasks.find((t) => t.status === 'in_progress');\n      const hasBlockedTasks = agentTasks.some((t) => t.status === 'blocked');\n\n      return {\n        agent: agentId,\n        role: AGENT_ROLES[agentId] || 'Unknown',\n        tasks: agentTasks.sort((a, b) => {\n          // Sort by priority, then status\n          const priorityOrder = { P0: 0, P1: 1, P2: 2, P3: 3 };\n          const statusOrder = {\n            in_progress: 0,\n            blocked: 1,\n            ready: 2,\n            complete: 3,\n          };\n\n          const priorityDiff =\n            (priorityOrder[a.priority as keyof typeof priorityOrder] ?? 99) -\n            (priorityOrder[b.priority as keyof typeof priorityOrder] ?? 99);\n\n          if (priorityDiff !== 0) return priorityDiff;\n\n          return (\n            (statusOrder[a.status as keyof typeof statusOrder] ?? 99) -\n            (statusOrder[b.status as keyof typeof statusOrder] ?? 99)\n          );\n        }),\n        activeTask: activeTask?.title,\n        status: hasBlockedTasks ? 'blocked' : activeTask ? 'active' : 'idle',\n      };\n    });\n\n    return NextResponse.json({\n      agents,\n      summary: {\n        totalTasks: tasks.length,\n        inProgress: tasks.filter((t) => t.status === 'in_progress').length,\n        blocked: tasks.filter((t) => t.status === 'blocked').length,\n        complete: tasks.filter((t) => t.status === 'complete').length,\n        activeAgents: agents.filter((a) => a.status === 'active').length,\n      },\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('[AgentStatus] Failed to load agent status:', error);\n\n    return NextResponse.json(\n      {\n        error: 'Failed to load agent status',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AAED;AACA;AACA;AACA;;;;;AAEO,MAAM,UAAU;AAqBvB,MAAM,cAAsC;IAC1C,QAAQ;IACR,KAAK;IACL,OAAO;IACP,OAAO;IACP,KAAK;IACL,MAAM;IACN,cAAc;IACd,cAAc;IACd,cAAc;IACd,cAAc;AAChB;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC1C,MAAM,QAAQ,MAAM,gIAAE,CAAC,OAAO,CAAC;QAE/B,MAAM,YAAY,MAAM,MAAM,CAAC,CAAC,IAAM,EAAE,QAAQ,CAAC;QACjD,MAAM,QAAgB,EAAE;QAExB,KAAK,MAAM,QAAQ,UAAW;YAC5B,IAAI;gBACF,MAAM,UAAU,MAAM,gIAAE,CAAC,QAAQ,CAAC,4GAAI,CAAC,IAAI,CAAC,UAAU,OAAO;gBAC7D,MAAM,OAAO,4KAAI,CAAC,IAAI,CAAC;gBAEvB,MAAM,IAAI,CAAC;oBACT,IAAI,KAAK,EAAE,IAAI,KAAK,OAAO,CAAC,SAAS;oBACrC,OAAO,KAAK,KAAK,IAAI;oBACrB,QAAQ,KAAK,MAAM,IAAI;oBACvB,UAAU,KAAK,QAAQ,IAAI;oBAC3B,OAAO,KAAK,KAAK,IAAI;oBACrB,UAAU,KAAK,QAAQ;oBACvB,YAAY,KAAK,UAAU;oBAC3B,YAAY,KAAK,UAAU;gBAC7B;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC,EAAE;YAC5C;QACF;QAEA,uBAAuB;QACvB,MAAM,WAAW,IAAI;QACrB,KAAK,MAAM,QAAQ,MAAO;YACxB,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK,GAAG;gBAC7B,SAAS,GAAG,CAAC,KAAK,KAAK,EAAE,EAAE;YAC7B;YACA,SAAS,GAAG,CAAC,KAAK,KAAK,EAAG,IAAI,CAAC;QACjC;QAEA,qBAAqB;QACrB,MAAM,SAAwB,OAAO,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YAC1D,MAAM,aAAa,SAAS,GAAG,CAAC,YAAY,EAAE;YAC9C,MAAM,aAAa,WAAW,IAAI,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK;YACvD,MAAM,kBAAkB,WAAW,IAAI,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK;YAE5D,OAAO;gBACL,OAAO;gBACP,MAAM,WAAW,CAAC,QAAQ,IAAI;gBAC9B,OAAO,WAAW,IAAI,CAAC,CAAC,GAAG;oBACzB,gCAAgC;oBAChC,MAAM,gBAAgB;wBAAE,IAAI;wBAAG,IAAI;wBAAG,IAAI;wBAAG,IAAI;oBAAE;oBACnD,MAAM,cAAc;wBAClB,aAAa;wBACb,SAAS;wBACT,OAAO;wBACP,UAAU;oBACZ;oBAEA,MAAM,eACJ,CAAC,aAAa,CAAC,EAAE,QAAQ,CAA+B,IAAI,EAAE,IAC9D,CAAC,aAAa,CAAC,EAAE,QAAQ,CAA+B,IAAI,EAAE;oBAEhE,IAAI,iBAAiB,GAAG,OAAO;oBAE/B,OACE,CAAC,WAAW,CAAC,EAAE,MAAM,CAA6B,IAAI,EAAE,IACxD,CAAC,WAAW,CAAC,EAAE,MAAM,CAA6B,IAAI,EAAE;gBAE5D;gBACA,YAAY,YAAY;gBACxB,QAAQ,kBAAkB,YAAY,aAAa,WAAW;YAChE;QACF;QAEA,OAAO,8JAAY,CAAC,IAAI,CAAC;YACvB;YACA,SAAS;gBACP,YAAY,MAAM,MAAM;gBACxB,YAAY,MAAM,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,eAAe,MAAM;gBAClE,SAAS,MAAM,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,WAAW,MAAM;gBAC3D,UAAU,MAAM,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,YAAY,MAAM;gBAC7D,cAAc,OAAO,MAAM,CAAC,CAAC,IAAM,EAAE,MAAM,KAAK,UAAU,MAAM;YAClE;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAE5D,OAAO,8JAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}