// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/agent-dashboard" | "/command-center" | "/dashboard" | "/demo/tracks" | "/demo/transport" | "/journey" | "/tasks-dashboard" | "/type-errors-dashboard" | "/ui-demo" | "/voice-chat" | "/workspace"
type AppRouteHandlerRoutes = "/api/agent-status" | "/api/analytics/consent" | "/api/analytics/telemetry" | "/api/audio/delete" | "/api/audio/upload" | "/api/audio/url" | "/api/auth/[...nextauth]" | "/api/auth/register" | "/api/chat" | "/api/chat-mock" | "/api/chat-openai" | "/api/command-center" | "/api/dashboard/state" | "/api/events/publish" | "/api/events/read" | "/api/generate/music" | "/api/health" | "/api/layouts" | "/api/layouts/[layoutId]" | "/api/milestones" | "/api/milestones/streak" | "/api/profile" | "/api/profile/delete" | "/api/profile/export" | "/api/profile/session" | "/api/profile/signals" | "/api/profile/skills" | "/api/projects/delete" | "/api/projects/list" | "/api/projects/load" | "/api/projects/save" | "/api/tasks" | "/api/team-chat" | "/api/type-errors" | "/api/user/preferences" | "/api/user/profile" | "/api/user/profile/avatar" | "/api/voice-bridge" | "/api/voice-chat" | "/api/voice/clone" | "/api/voice/harmony"
type PageRoutes = never
type LayoutRoutes = "/" | "/workspace"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/agent-dashboard": {}
  "/api/agent-status": {}
  "/api/analytics/consent": {}
  "/api/analytics/telemetry": {}
  "/api/audio/delete": {}
  "/api/audio/upload": {}
  "/api/audio/url": {}
  "/api/auth/[...nextauth]": { "nextauth": string[]; }
  "/api/auth/register": {}
  "/api/chat": {}
  "/api/chat-mock": {}
  "/api/chat-openai": {}
  "/api/command-center": {}
  "/api/dashboard/state": {}
  "/api/events/publish": {}
  "/api/events/read": {}
  "/api/generate/music": {}
  "/api/health": {}
  "/api/layouts": {}
  "/api/layouts/[layoutId]": { "layoutId": string; }
  "/api/milestones": {}
  "/api/milestones/streak": {}
  "/api/profile": {}
  "/api/profile/delete": {}
  "/api/profile/export": {}
  "/api/profile/session": {}
  "/api/profile/signals": {}
  "/api/profile/skills": {}
  "/api/projects/delete": {}
  "/api/projects/list": {}
  "/api/projects/load": {}
  "/api/projects/save": {}
  "/api/tasks": {}
  "/api/team-chat": {}
  "/api/type-errors": {}
  "/api/user/preferences": {}
  "/api/user/profile": {}
  "/api/user/profile/avatar": {}
  "/api/voice-bridge": {}
  "/api/voice-chat": {}
  "/api/voice/clone": {}
  "/api/voice/harmony": {}
  "/command-center": {}
  "/dashboard": {}
  "/demo/tracks": {}
  "/demo/transport": {}
  "/journey": {}
  "/tasks-dashboard": {}
  "/type-errors-dashboard": {}
  "/ui-demo": {}
  "/voice-chat": {}
  "/workspace": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/workspace": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
