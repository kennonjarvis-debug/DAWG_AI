'use client';

import { useEffect, useState, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Mic, MicOff, Send } from 'lucide-react';

interface ChatMessage {
  id: string;
  timestamp: string;
  from: string;
  to?: string;
  message: string;
  type: 'user' | 'agent' | 'system';
  read: boolean;
}

interface AgentInfo {
  name: string;
  vibe: string;
  owns: string;
  voiceTrigger: string;
  color: string;
  accentColor: string;
}

const AGENT_INFO: Record<string, AgentInfo> = {
  alexis: {
    name: 'Alexis AI',
    vibe: 'Planner / PM - calm, analytical, deadline-driven',
    owns: 'backlog, dependencies, roadmaps, stability sprints',
    voiceTrigger: 'Hey Alexis: what\'s blocked today?',
    color: 'from-purple-500 to-purple-700',
    accentColor: 'bg-purple-500',
  },
  tom: {
    name: 'Tom AI',
    vibe: 'Code Assistance / Implementer - pragmatic, test-first',
    owns: 'feature implementation, refactors, fixing TS errors',
    voiceTrigger: 'Hey Tom: make the typecheck green',
    color: 'from-blue-500 to-blue-700',
    accentColor: 'bg-blue-500',
  },
  jerry: {
    name: 'Jerry AI',
    vibe: 'AI Conductor / Systems Architect - orchestral, contract-driven',
    owns: 'typed event bus, CI/CD, E2E flows, green-gate',
    voiceTrigger: 'Hey Jerry: run green-gate',
    color: 'from-green-500 to-green-700',
    accentColor: 'bg-green-500',
  },
  karen: {
    name: 'Karen AI',
    vibe: 'Data Manager / Profiles & Policy - precise, privacy-first',
    owns: 'OpenAPI types, persistence, cloud sync, policies',
    voiceTrigger: 'Hey Karen: regenerate OpenAPI types',
    color: 'from-pink-500 to-pink-700',
    accentColor: 'bg-pink-500',
  },
  max: {
    name: 'Max AI',
    vibe: 'UI / Frontend - pixel-tight, UX-opinionated',
    owns: 'React/Tailwind components, layout, widgets',
    voiceTrigger: 'Hey Max: ship ReferenceTrackUploader',
    color: 'from-orange-500 to-orange-700',
    accentColor: 'bg-orange-500',
  },
  alex: {
    name: 'Alex AI',
    vibe: 'Audio Engine - DSP-savvy, real-time safe',
    owns: 'WebAudio, worklets, pitch analysis, audio widgets',
    voiceTrigger: 'Hey Alex: validate worklet types',
    color: 'from-red-500 to-red-700',
    accentColor: 'bg-red-500',
  },
};

// Individual Agent Chat Component
function AgentChat({ agentId, agentInfo }: { agentId: string; agentInfo: AgentInfo }) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const messagesContainerRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    // Only auto-scroll if user is already at the very bottom (within 10px) or if it's the first load
    const container = messagesContainerRef.current;
    if (container) {
      const isAtBottom = container.scrollHeight - container.scrollTop - container.clientHeight < 10;
      const isEmpty = messages.length === 0;
      if (isAtBottom || isEmpty) {
        scrollToBottom();
      }
    }
  }, [messages]);

  // Fetch messages for this agent
  const fetchMessages = async () => {
    try {
      console.log(`[AgentChat:${agentId}] Fetching messages...`);
      const response = await fetch(`/api/team-chat?agent=${agentId}&limit=20`);
      const data = await response.json();
      if (data.messages) {
        console.log(`[AgentChat:${agentId}] Got ${data.messages.length} messages`);
        setMessages(data.messages);
        // Agent is online if they've sent a message in the last 30 seconds
        const lastAgentMessage = data.messages
          .filter((m: ChatMessage) => m.from === agentId)
          .sort((a: ChatMessage, b: ChatMessage) =>
            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
          )[0];

        if (lastAgentMessage) {
          const timeSinceLastMessage = Date.now() - new Date(lastAgentMessage.timestamp).getTime();
          const online = timeSinceLastMessage < 30000;
          console.log(`[AgentChat:${agentId}] Status: ${online ? 'ONLINE' : 'offline'} (${Math.round(timeSinceLastMessage/1000)}s)`);
        }
      }
    } catch (error) {
      console.error(`[AgentChat:${agentId}] Failed to fetch messages:`, error);
    }
  };

  useEffect(() => {
    fetchMessages();
    const interval = setInterval(fetchMessages, 2000);
    return () => clearInterval(interval);
  }, [agentId]);

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    try {
      console.log(`[AgentChat:${agentId}] Sending message:`, inputMessage.trim());
      const response = await fetch('/api/team-chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          from: 'user',
          to: agentId,
          message: inputMessage.trim(),
          type: 'user',
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log(`[AgentChat:${agentId}] Message sent successfully:`, data);
        setInputMessage('');
        fetchMessages();
      } else {
        console.error(`[AgentChat:${agentId}] Failed to send message. Status:`, response.status);
      }
    } catch (error) {
      console.error(`[AgentChat:${agentId}] Error sending message:`, error);
    }
  };

  const toggleRecording = () => {
    setIsRecording(!isRecording);
    // TODO: Implement voice recording
  };

  return (
    <Card className="h-full flex flex-col shadow-xl border-2 hover:shadow-2xl transition-all duration-300 bg-white">
      <CardHeader className={`bg-gradient-to-r ${agentInfo.color} text-white pb-3`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            {/* Always show green light */}
            <div className="w-3 h-3 rounded-full bg-green-400 animate-pulse shadow-lg"></div>
            <div>
              <CardTitle className="text-lg font-bold text-white">{agentInfo.name}</CardTitle>
              <p className="text-xs text-white opacity-90">🟢 Online</p>
            </div>
          </div>
          <button
            onClick={toggleRecording}
            className={`p-2 rounded-full transition-all duration-200 ${
              isRecording
                ? 'bg-red-500 animate-pulse shadow-lg'
                : 'bg-white/20 hover:bg-white/30'
            }`}
          >
            {isRecording ? <MicOff size={18} /> : <Mic size={18} />}
          </button>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col gap-2 min-h-0 p-3 bg-white">
        {/* Messages */}
        <div ref={messagesContainerRef} className="flex-1 overflow-y-auto space-y-2">
          {messages.length === 0 ? (
            <div className="text-center text-gray-600 py-4 text-xs">
              <p className="text-black">No messages yet</p>
              <p className="mt-1 text-gray-600">Start a conversation!</p>
            </div>
          ) : (
            messages.map((msg) => (
              <div
                key={msg.id}
                className={`p-2 rounded-lg text-xs ${
                  msg.from === 'user'
                    ? 'bg-blue-100 border border-blue-300 ml-4'
                    : 'bg-gray-100 border border-gray-300 mr-4'
                }`}
              >
                <div className="flex items-center gap-1 mb-1">
                  <span className="font-semibold text-xs text-black">
                    {msg.from === 'user' ? 'You' : agentInfo.name}
                  </span>
                  <span className="text-gray-600 ml-auto text-xs">
                    {new Date(msg.timestamp).toLocaleTimeString([], {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </span>
                </div>
                <p className="text-xs whitespace-pre-wrap text-black">{msg.message}</p>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="flex gap-2">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder={`Message ${agentInfo.name}...`}
            className="flex-1 px-3 py-2 text-sm border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black bg-white placeholder-gray-500"
          />
          <button
            onClick={sendMessage}
            disabled={!inputMessage.trim()}
            className={`p-2 rounded-lg ${agentInfo.accentColor} text-white hover:opacity-90 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all`}
          >
            <Send size={18} />
          </button>
        </div>
      </CardContent>
    </Card>
  );
}

// Master Team Chat Component
function MasterTeamChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const messagesContainerRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    // Only auto-scroll if user is already at the very bottom (within 10px) or if it's the first load
    const container = messagesContainerRef.current;
    if (container) {
      const isAtBottom = container.scrollHeight - container.scrollTop - container.clientHeight < 10;
      const isEmpty = messages.length === 0;
      if (isAtBottom || isEmpty) {
        scrollToBottom();
      }
    }
  }, [messages]);

  const fetchMessages = async () => {
    try {
      console.log('[MasterChat] Fetching messages...');
      const response = await fetch('/api/team-chat?limit=50');
      const data = await response.json();
      if (data.messages) {
        console.log('[MasterChat] Got', data.messages.length, 'messages');
        setMessages(data.messages);
      }
    } catch (error) {
      console.error('[MasterChat] Failed to fetch messages:', error);
    }
  };

  useEffect(() => {
    console.log('[MasterChat] Component mounted');
    fetchMessages();
    const interval = setInterval(fetchMessages, 2000);
    return () => clearInterval(interval);
  }, []);

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    try {
      console.log('[MasterChat] Sending broadcast message:', inputMessage.trim());
      const response = await fetch('/api/team-chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          from: 'user',
          to: 'all',
          message: inputMessage.trim(),
          type: 'user',
        }),
      });

      if (response.ok) {
        const data = await response.json();
        console.log('[MasterChat] Broadcast sent successfully:', data);
        setInputMessage('');
        fetchMessages();
      } else {
        console.error('[MasterChat] Failed to send. Status:', response.status);
        const errorData = await response.json();
        console.error('[MasterChat] Error details:', errorData);
      }
    } catch (error) {
      console.error('[MasterChat] Error sending message:', error);
    }
  };

  const toggleRecording = () => {
    setIsRecording(!isRecording);
    // TODO: Implement voice recording
  };

  const getAgentColor = (from: string) => {
    if (from === 'user') return 'bg-blue-600';
    return AGENT_INFO[from]?.accentColor || 'bg-gray-500';
  };

  return (
    <Card className="h-full flex flex-col shadow-2xl border-2 border-gradient-to-r from-cyan-500 to-blue-500 bg-white">
      <CardHeader className="bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 text-white pb-3">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-xl font-bold text-white">🌐 Master Team Chat</CardTitle>
            <p className="text-xs text-white opacity-90">Broadcast to all agents</p>
          </div>
          <button
            onClick={toggleRecording}
            className={`p-3 rounded-full transition-all duration-200 ${
              isRecording
                ? 'bg-red-500 animate-pulse shadow-lg'
                : 'bg-white/20 hover:bg-white/30'
            }`}
          >
            {isRecording ? <MicOff size={20} /> : <Mic size={20} />}
          </button>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col gap-3 min-h-0 p-4 bg-white">
        {/* Messages */}
        <div ref={messagesContainerRef} className="flex-1 overflow-y-auto space-y-2">
          {messages.length === 0 ? (
            <div className="text-center text-gray-600 py-8">
              <p className="text-black">No messages yet</p>
              <p className="text-sm mt-2 text-gray-600">Start coordinating with your team!</p>
            </div>
          ) : (
            messages.map((msg) => (
              <div
                key={msg.id}
                className={`p-3 rounded-lg border ${
                  msg.from === 'user'
                    ? 'bg-blue-50 border-blue-300'
                    : 'bg-gray-50 border-gray-300'
                }`}
              >
                <div className="flex items-center gap-2 mb-1">
                  <Badge className={`${getAgentColor(msg.from)} text-white text-xs`}>
                    {msg.from === 'user' ? 'You' : AGENT_INFO[msg.from]?.name || msg.from}
                  </Badge>
                  {msg.to && msg.to !== 'all' && (
                    <>
                      <span className="text-xs text-gray-600">→</span>
                      <Badge className={`${AGENT_INFO[msg.to]?.accentColor || 'bg-gray-500'} text-white text-xs`}>
                        {AGENT_INFO[msg.to]?.name || msg.to}
                      </Badge>
                    </>
                  )}
                  <span className="text-xs text-gray-600 ml-auto">
                    {new Date(msg.timestamp).toLocaleTimeString()}
                  </span>
                </div>
                <p className="text-sm whitespace-pre-wrap text-black">{msg.message}</p>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="flex gap-2">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder="Broadcast to all agents..."
            className="flex-1 px-4 py-3 text-sm border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-black bg-white placeholder-gray-500"
          />
          <button
            onClick={sendMessage}
            disabled={!inputMessage.trim()}
            className="px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-lg font-medium hover:shadow-lg disabled:bg-gray-300 disabled:cursor-not-allowed transition-all"
          >
            <Send size={20} />
          </button>
        </div>
      </CardContent>
    </Card>
  );
}

export default function AgentDashboard() {
  const [agentStatuses, setAgentStatuses] = useState<Record<string, boolean>>({});

  // Debug logging
  useEffect(() => {
    console.log('[Command Center] Dashboard mounted');
    console.log('[Command Center] Viewport size:', {
      width: window.innerWidth,
      height: window.innerHeight
    });
  }, []);

  // Check which agents are online by looking at recent messages
  useEffect(() => {
    const checkAgentStatus = async () => {
      try {
        console.log('[Command Center] Checking agent status...');
        const response = await fetch('/api/team-chat?limit=100');
        const data = await response.json();

        if (data.messages) {
          console.log('[Command Center] Got', data.messages.length, 'messages');
          const statuses: Record<string, boolean> = {};
          Object.keys(AGENT_INFO).forEach(agentId => {
            const lastMessage = data.messages
              .filter((m: ChatMessage) => m.from === agentId)
              .sort((a: ChatMessage, b: ChatMessage) =>
                new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
              )[0];

            if (lastMessage) {
              const timeSince = Date.now() - new Date(lastMessage.timestamp).getTime();
              statuses[agentId] = timeSince < 30000;
              console.log(`[Command Center] ${agentId}:`, statuses[agentId] ? 'online' : 'offline', `(${Math.round(timeSince/1000)}s ago)`);
            } else {
              statuses[agentId] = false;
            }
          });
          setAgentStatuses(statuses);
        }
      } catch (error) {
        console.error('[Command Center] Failed to check agent status:', error);
      }
    };

    checkAgentStatus();
    const interval = setInterval(checkAgentStatus, 5000);
    return () => clearInterval(interval);
  }, []);

  const onlineCount = Object.values(agentStatuses).filter(Boolean).length;

  return (
    <div className="fixed inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-black overflow-auto">
      <div className="container mx-auto p-4 max-w-[1800px]">
        {/* Header - Fixed height */}
        <div className="flex items-center justify-between mb-4 flex-shrink-0">
          <div>
            <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent">
              DAWG AI Command Center
            </h1>
            <p className="text-gray-400 text-sm mt-1">Real-time agent coordination & communication</p>
          </div>
          <div className="text-right">
            <div className="text-2xl md:text-3xl font-bold text-cyan-400">{onlineCount}/6</div>
            <div className="text-xs text-gray-400">Agents Online</div>
          </div>
        </div>

        {/* Master Team Chat - Bigger height */}
        <div className="h-[350px] md:h-[400px] mb-4">
          <MasterTeamChat />
        </div>

        {/* Individual Agent Chats - Responsive grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-4">
          {Object.entries(AGENT_INFO).map(([agentId, info]) => (
            <div key={agentId} className="h-[350px] md:h-[400px]">
              <AgentChat agentId={agentId} agentInfo={info} />
            </div>
          ))}
        </div>

        {/* Agent Work Status */}
        <Card className="border-2 border-gray-700 bg-gray-800/50 mb-4">
          <CardHeader>
            <CardTitle className="text-white text-sm">📊 Agent Work Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
              {Object.entries(AGENT_INFO).map(([agentId, info]) => (
                <div key={agentId} className="p-3 rounded-lg bg-gray-700/50 border border-gray-600">
                  <div className="flex items-center gap-2 mb-2">
                    <div className={`w-2 h-2 rounded-full ${agentStatuses[agentId] ? 'bg-green-400 animate-pulse' : 'bg-gray-500'}`}></div>
                    <div className={`inline-block px-2 py-1 rounded text-white text-xs font-bold ${info.accentColor}`}>
                      {info.name}
                    </div>
                  </div>
                  <p className="text-xs text-gray-400 mb-1">{info.vibe}</p>
                  <p className="text-xs text-gray-300 font-semibold">Owns: <span className="font-normal">{info.owns}</span></p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
